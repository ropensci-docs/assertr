[{"path":"https://docs.ropensci.org/assertr/articles/assertr.html","id":"concrete-data-errors","dir":"Articles","previous_headings":"","what":"concrete data errors","title":"Assertive R Programming with assertr","text":"Let’s say, example, R’s built-car dataset, mtcars, built-rather procured external source known making errors data entry coding. particular, mtcars dataset looks like : let’s pretend data got accidentally negated 5th mpg value: Whoops! wanted find average miles per gallon number engine cylinders, might like : indicates average miles per gallon 8 cylinder car lowly 12.43. However, correct dataset ’s really just 15. Data errors like extremely easy miss doesn’t cause error, results look reasonable.","code":"head(mtcars) ##                    mpg cyl disp  hp drat    wt  qsec vs am gear carb ## Mazda RX4         21.0   6  160 110 3.90 2.620 16.46  0  1    4    4 ## Mazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1    4    4 ## Datsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1    4    1 ## Hornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0    3    1 ## Hornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2 ## Valiant           18.1   6  225 105 2.76 3.460 20.22  1  0    3    1 our.data <- mtcars our.data$mpg[5] <- our.data$mpg[5] * -1 our.data[4:6,] ##                     mpg cyl disp  hp drat    wt  qsec vs am gear carb ## Hornet 4 Drive     21.4   6  258 110 3.08 3.215 19.44  1  0    3    1 ## Hornet Sportabout -18.7   8  360 175 3.15 3.440 17.02  0  0    3    2 ## Valiant            18.1   6  225 105 2.76 3.460 20.22  1  0    3    1 library(dplyr)  our.data %>%   group_by(cyl) %>%   summarise(avg.mpg=mean(mpg)) ## # A tibble: 3 × 2 ##     cyl avg.mpg ##   <dbl>   <dbl> ## 1     4    26.7 ## 2     6    19.7 ## 3     8    12.4"},{"path":"https://docs.ropensci.org/assertr/articles/assertr.html","id":"enter-assertr","dir":"Articles","previous_headings":"","what":"enter assertr","title":"Assertive R Programming with assertr","text":"combat , might want use assertr’s verify function make sure mpg positive number: done , caught data error. verify function takes data frame (first argument provided %>% operator), logical (boolean) expression. , verify evaluates expression using scope provided data frame. logical values expression’s result FALSE, verify raise error terminates processing pipeline. also written assertion using assertr’s assert function… assert function takes data frame, predicate function, arbitrary number columns apply predicate function . predicate function (function returns logical/boolean value) applied every element columns selected, raise error finds violations. Internally, assert function uses dplyr’s select function extract columns test predicate function . allows complex assertions. Let’s say wanted make sure values dataset greater zero (except mpg):","code":"library(assertr)  our.data %>%   verify(mpg >= 0) %>%   group_by(cyl) %>%   summarise(avg.mpg=mean(mpg)) ## verification [mpg >= 0] failed! (1 failure) ##  ##     verb redux_fn predicate column index value ## 1 verify       NA  mpg >= 0     NA     5    NA ## Error: assertr stopped execution our.data %>%   assert(within_bounds(0,Inf), mpg) %>%   group_by(cyl) %>%   summarise(avg.mpg=mean(mpg)) ## Column 'mpg' violates assertion 'within_bounds(0, Inf)' 1 time ##     verb redux_fn             predicate column index value ## 1 assert       NA within_bounds(0, Inf)    mpg     5 -18.7 ## Error: assertr stopped execution library(assertr)  our.data %>%   assert(within_bounds(0,Inf, include.lower=FALSE), -mpg) %>%   group_by(cyl) %>%   summarise(avg.mpg=mean(mpg)) ## Column 'vs' violates assertion 'within_bounds(0, Inf, include.lower = FALSE)' 18 times ##     verb redux_fn                                    predicate column index ## 1 assert       NA within_bounds(0, Inf, include.lower = FALSE)     vs     1 ## 2 assert       NA within_bounds(0, Inf, include.lower = FALSE)     vs     2 ## 3 assert       NA within_bounds(0, Inf, include.lower = FALSE)     vs     5 ## 4 assert       NA within_bounds(0, Inf, include.lower = FALSE)     vs     7 ## 5 assert       NA within_bounds(0, Inf, include.lower = FALSE)     vs    12 ##   value ## 1     0 ## 2     0 ## 3     0 ## 4     0 ## 5     0 ##   [omitted 13 rows] ##  ##  ## Column 'am' violates assertion 'within_bounds(0, Inf, include.lower = FALSE)' 19 times ##     verb redux_fn                                    predicate column index ## 1 assert       NA within_bounds(0, Inf, include.lower = FALSE)     am     4 ## 2 assert       NA within_bounds(0, Inf, include.lower = FALSE)     am     5 ## 3 assert       NA within_bounds(0, Inf, include.lower = FALSE)     am     6 ## 4 assert       NA within_bounds(0, Inf, include.lower = FALSE)     am     7 ## 5 assert       NA within_bounds(0, Inf, include.lower = FALSE)     am     8 ##   value ## 1     0 ## 2     0 ## 3     0 ## 4     0 ## 5     0 ##   [omitted 14 rows] ## Error: assertr stopped execution"},{"path":"https://docs.ropensci.org/assertr/articles/assertr.html","id":"verify-vs--assert","dir":"Articles","previous_headings":"","what":"verify vs. assert","title":"Assertive R Programming with assertr","text":"first noticable difference verify assert verify takes expression, assert takes predicate columns apply . might make verify function look elegant–’s important drawback. verify evaluate entire expression first, check violations. , verify can’t tell offending datum. One important drawback assert, consequence application predicate columns, assert can’t confirm assertions data structure . example, let’s say reading dataset disk know 100 observations; write check assumption like : checking functions available verify has_all_names, has_only_names, has_class. powerful advantage assert… assert one advantage ’ve heretofore ignored.","code":"dat <- read.csv(\"a-data-file.csv\") dat %>%   verify(nrow(.) > 100) %>%   ...."},{"path":"https://docs.ropensci.org/assertr/articles/assertr.html","id":"assertrs-predicates","dir":"Articles","previous_headings":"","what":"assertr’s predicates","title":"Assertive R Programming with assertr","text":"assertr’s predicates, built-custom, make assert powerful. predicates built assertr not_na - checks element NA within_bounds - returns predicate function checks numeric value falls within bounds supplied, in_set - returns predicate function checks element member set supplied. is_uniq - checks see element appears ’ve already seen within_bounds action… let’s use in_set function make sure 0s 1s (automatic manual, respectively) values column… reading dataset contained column representing boroughs New York City (named BORO), can verify mis-spelled otherwise unexpected boroughs like … Rad!","code":"our.data %>%   assert(in_set(0,1), am) %>%   ... boroughs <- c(\"Bronx\", \"Manhattan\", \"Queens\", \"Brooklyn\", \"Staten Island\")  read.csv(\"a-dataset.csv\") %>%   assert(in_set(boroughs), BORO) %>%   ..."},{"path":"https://docs.ropensci.org/assertr/articles/assertr.html","id":"custom-predicates","dir":"Articles","previous_headings":"","what":"custom predicates","title":"Assertive R Programming with assertr","text":"convenient feature assertr makes construction custom predicate functions easy. order make custom predicate, specify cases predicate return FALSE. Let’s say dataset ID column (named ID) want check empty string. can create predicate like : apply like : Let’s say ID column always 7-digit number. can confirm IDs 7-digits defining following predicate: powerful consequence easy creation predicates assert function lends use lambda predicates (unnamed predicates used ). check might better written Neat-o!","code":"not.empty.p <- function(x) if(x==\"\") return(FALSE) read.csv(\"another-dataset.csv\") %>%   assert(not.empty.p, ID) %>%   ... seven.digit.p <- function(x) nchar(x)==7 read.csv(\"another-dataset.csv\") %>%   assert(function(x) nchar(x)==7, ID) %>%   ..."},{"path":"https://docs.ropensci.org/assertr/articles/assertr.html","id":"enter-insist-and-predicate-generators","dir":"Articles","previous_headings":"","what":"enter insist and predicate ‘generators’","title":"Assertive R Programming with assertr","text":"often, need dynamically determine predicate function used based vector checked. example, check see every element vector within n standard deviations mean, need create within_bounds predicate dynamically determining bounds reading computing vector . end, assert function good; just applies raw predicate vector. need function like assert apply predicate generators vectors, return predicates, perform assert-like functionality checking element vectors respective custom predicate. precisely insist . much simpler may sound. Hopefully, examples clear confusion. primary use case insist conjunction within_n_sds within_n_mads predicate generator. Suppose wanted check every mpg value mtcars data set within 3 standard deviations mean finding average miles per gallon number engine cylinders. write something like : Notice happens drop z-score 2 standard deviations mean Execution pipeline halted. now know exactly data point violated predicate within_n_sds(2)(mtcars$mpg) returned. Now ’s efficient car! predicate generator, insist takes arbitrary number columns just like assert using syntax dplyr’s select function. wanted check everything mtcars within 10 standard deviations mean (column vector), can like : Aces! chose use within_n_sds example people familiar z-scores. However, practical purposes, related predicate generator within_n_mads useful. problem within_n_sds mean standard deviation heavily influenced outliers, presence compromise attempts identify using statistics. contrast within_n_sds, within_n_mads uses robust statistics, median median absolute deviation, identify potentially erroneous data points. example, vector <7.4, 7.1, 7.2, 72.1> almost certainly erroneous data point, within_n_sds(2) fail detect . whereas within_n_mads detect even lower levels power…. Tubular!","code":"mtcars %>%   insist(within_n_sds(3), mpg) %>%   group_by(cyl) %>%   summarise(avg.mpg=mean(mpg)) ## # A tibble: 3 × 2 ##     cyl avg.mpg ##   <dbl>   <dbl> ## 1     4    26.7 ## 2     6    19.7 ## 3     8    15.1 mtcars %>%   insist(within_n_sds(2), mpg) %>%   group_by(cyl) %>%   summarise(avg.mpg=mean(mpg)) ## Column 'mpg' violates assertion 'within_n_sds(2)' 2 times ##     verb redux_fn       predicate column index value ## 1 insist       NA within_n_sds(2)    mpg    18  32.4 ## 2 insist       NA within_n_sds(2)    mpg    20  33.9 ## Error: assertr stopped execution mtcars %>%   insist(within_n_sds(10), mpg:carb) %>%   group_by(cyl) %>%   summarise(avg.mpg=mean(mpg)) ## # A tibble: 3 × 2 ##     cyl avg.mpg ##   <dbl>   <dbl> ## 1     4    26.7 ## 2     6    19.7 ## 3     8    15.1 example.vector <- c(7.4, 7.1, 7.2, 72.1) within_n_sds(2)(example.vector)(example.vector) ## [1] TRUE TRUE TRUE TRUE example.vector <- c(7.4, 7.1, 7.2, 72.1) within_n_mads(2)(example.vector)(example.vector) ## [1]  TRUE  TRUE  TRUE FALSE within_n_mads(1)(example.vector)(example.vector) ## [1]  TRUE  TRUE  TRUE FALSE"},{"path":"https://docs.ropensci.org/assertr/articles/assertr.html","id":"row-wise-assertions-and-row-reduction-functions","dir":"Articles","previous_headings":"","what":"row-wise assertions and row reduction functions","title":"Assertive R Programming with assertr","text":"cool ’s far, still isn’t enough constitute complete grammar data integrity checking. see , check following small example data set: Can spot brazen outlier? ’re certainly going find checking distribution column! elements columns within 2 standard deviations respective means. Unless really good eye, way ’re going catch mistake plotting data set.  Ok, ys roughly 10 times xs except outlying data point. problem plot data sets catch anomalies really hard visualize 4-dimensions , near impossible high-dimensional data. ’s way catching anomaly looking individual column separately; way catch view row complete observation compare rest. end, assertr provides three functions take data frame, reduce row single value. ’ll call row reduction functions. first one ’ll look called maha_dist. computes average mahalanobis distance (kind like multivariate z-scoring outlier detection) row whole data set. big idea resultant vector, big/distant values potential anomalous entries. Let’s look distribution mahalanobis distances data set…  ’s question whether ’s anomalous entry! check sort thing using assertr constructs? Well, maha_dist typically used insist_rows function. insist_rows takes data frame, row reduction function, predicate-generating function, arbitrary number columns apply predicate function . row reduction function (maha_dist case) applied data frame, returns value row. predicate-generating function applied vector returned row reduction function resultant predicate applied element vector. raise error finds violations. always, undoubtedly sounds far confusing really . ’s example use Check ! clear, function running supplied data frame maha_dist function returns value row corresponding mahalanobis distance. (whole data frame used used everything() selection function dplyr package.) , within_n_mads(3) computes vector returns bounds checking predicate. bounds checking predicate checks see mahalanobis distances within 3 median absolute deviations . , pipeline errors . Note data.frame errors returned error report contains verb used (insist_rows), row reduction function, predicate, column (columns), index failure offendind datum. probably powerful construct assertr–can find whole lot nasty errors difficult check hand. Part makes powerful flexible maha_dist . used , far, data frame numerics, can handle sorts data frames. really see shine, let’s use iris data set, contains categorical variable right-column…  Looks ok, happens accidentally enter row different species…  Look ! mistake can easily picked reasonable bounds checker… insist insist_rows similar take predicate generators actual predicates. makes insist_rows different usage row-reduce data frame. assert row-oriented counterpart, ; ’s called assert_rows. insist assert insist_rows assert_rows. assert_rows works insist_rows, except instead using predicate generator row-reduced data frame, uses regular-old predicate. example assert_rows use case, let’s say got data set (another-dataset.csv) web don’t want continue processing data set row contains two missing values (NAs). can use row reduction function num_row_NAs reduce rows number NAs contain. , simple bounds checker suffice ensuring element higher 2… assert_rows can used anomaly detection well. future version assertr may contain cosine distance row reduction function. Since cosine distances constained -1 1, easy use non-dynamic predicate disallow certain values.","code":"example.data <- data.frame(x=c(8, 9, 6, 5, 9, 5, 6, 7,                              8, 9, 6, 5, 5, 6, 7),                          y=c(82, 91, 61, 49, 40, 49, 57,                              74, 78, 90, 61, 49, 51, 62, 68)) (example.data) ##    x  y ## 1  8 82 ## 2  9 91 ## 3  6 61 ## 4  5 49 ## 5  9 40 ## 6  5 49 ## 7  6 57 ## 8  7 74 ## 9  8 78 ## 10 9 90 ## 11 6 61 ## 12 5 49 ## 13 5 51 ## 14 6 62 ## 15 7 68 plot(example.data$x, example.data$y, xlab=\"\", ylab=\"\") maha_dist(example.data) ##  [1]  1.28106379  3.10992407  0.25081851  1.35993969 12.81898913  1.35993969 ##  [7]  0.26181283  0.47714597  0.87804987  2.95741956  0.25081851  1.35993969 ## [13]  1.29208587  0.28235776  0.05969507 maha_dist(example.data) %>% hist(main=\"\", xlab=\"\") example.data %>%   insist_rows(maha_dist, within_n_mads(3), dplyr::everything()) ## Data frame row reduction 'maha_dist' violates predicate 'within_n_mads(3)' 1 time ##          verb  redux_fn        predicate               column index    value ## 1 insist_rows maha_dist within_n_mads(3) ~dplyr::everything()     5 12.81899 ## Error: assertr stopped execution head(iris) ##   Sepal.Length Sepal.Width Petal.Length Petal.Width Species ## 1          5.1         3.5          1.4         0.2  setosa ## 2          4.9         3.0          1.4         0.2  setosa ## 3          4.7         3.2          1.3         0.2  setosa ## 4          4.6         3.1          1.5         0.2  setosa ## 5          5.0         3.6          1.4         0.2  setosa ## 6          5.4         3.9          1.7         0.4  setosa iris %>% maha_dist %>% hist(main=\"\", xlab=\"\") mistake <- iris (mistake[149,5]) ## [1] virginica ## Levels: setosa versicolor virginica mistake[149,5] <- \"setosa\"  mistake %>% maha_dist %>% hist(main=\"\", xlab=\"\") mistake %>% maha_dist %>% which.max ## [1] 149 mistake %>% insist_rows(maha_dist, within_n_mads(7), dplyr::everything()) ## Data frame row reduction 'maha_dist' violates predicate 'within_n_mads(7)' 1 time ##          verb  redux_fn        predicate               column index   value ## 1 insist_rows maha_dist within_n_mads(7) ~dplyr::everything()   149 56.6992 ## Error: assertr stopped execution read.csv(\"another-dataset.csv\") %>%   assert_rows(num_row_NAs, within_bounds(0,2), dplyr::everything()) %>%   ..."},{"path":"https://docs.ropensci.org/assertr/articles/assertr.html","id":"success-error-and-defect-functions","dir":"Articles","previous_headings":"","what":"success, error and defect functions","title":"Assertive R Programming with assertr","text":"behavior functions like assert, assert_rows, insist, insist_rows, verify assertion passes, fails skipped due data defect configurable via success_fun, error_fun defect_fun parameters, respectively. success_fun parameter takes function takes data passed assertion function parameter. can write success handler function, provided package: success_continue - just returns data passed assertion function (default). success_logical - returns TRUE success_append - returns data passed assertion function also attaches basic information verification result special attribute data. success_report - success results stored (chain_start(store_results=TRUE)), verification ended success, prints summary successful validations (chan) simple verification result single check returns data. success_df_return - success results stored (chain_start(store_results=TRUE)), verification ended success, prints data.frame verification results (can used chain_end single verification). error_fun parameter takes function takes data passed assertion function parameter. can write error handler function, provided package: error_stop - Prints summary errors halts execution (default) error_report - Prints information available errors halts execution. error_append - Attaches errors special attribute data returns data. chiefly allow assertr errors accumulated pipeline assertions can chance checked errors can displayed end chain. error_logical - returns FALSE just_warn - Prints summary errors halt execution, just issues warning. warn_report - Prints information available errors halt execution, just issues warning. defect_report - single rule defective data displays short info skipping current assertion. chain_end sums skipped rules defective data. defect_df_return - single rule defective data returns info data.frame skipping current assertion. chain_end returns skipped rules info data.frame defective data. defect_fun parameter takes function takes data passed assertion function parameter. Defect handler called previous assertions marked obligatory failed (see section). can write defect handler function, provided package: defect_append - Attaches assertion call info defective data special attribute data returns data. defect_report - single rule defective data displays short info skipping current assertion. chain_end sums skipped rules defective data. defect_df_return - single rule defective data returns info data.frame skipping current assertion. chain_end returns skipped rules info data.frame defective data.","code":""},{"path":"https://docs.ropensci.org/assertr/articles/assertr.html","id":"obligatory-assertions","dir":"Articles","previous_headings":"","what":"Obligatory assertions","title":"Assertive R Programming with assertr","text":"may find situation rules independent. example: assert requires existence vs columns, checked previously verify assertion. example, want store info errors assertions finished won’t happen. missing column data returns error related assertion check. result code execution ends handled error. allow situations obligatory rules introduced. can create obligatory rule adding obligatory = TRUE inside assertion function. rule obligatory failed, data marked defective following rule handled defect_fun function. default defect_fun=defect_append registers information running assertion defective data skips rule execution. display information skipped rule using defect_report:","code":"mtcars_without_am <- mtcars %>%    dplyr::select(-am) mtcars_without_am %>%    verify(has_all_names(\"am\", \"vs\"), error_fun = error_append) %>%    assert(in_set(0, 1), am, vs, error_fun = error_report) mtcars_without_am <- mtcars %>%    dplyr::select(-am) mtcars_without_am %>%    verify(has_all_names(\"am\", \"vs\"), obligatory=TRUE, error_fun=error_append) %>%    assert(in_set(0, 1), am, vs, defect_fun=defect_report) ## assert: verification [in_set(0, 1)] omitted due to data defect! Columns passed to assertion: am vs"},{"path":"https://docs.ropensci.org/assertr/articles/assertr.html","id":"combining-chains-of-assertions","dir":"Articles","previous_headings":"","what":"combining chains of assertions","title":"Assertive R Programming with assertr","text":"Let’s say part automated pipeline grabs mtcars untrusted source finds average miles per gallon number engine cylinders, want perform following checks… columns “mpg”, “vs”, “” dataset contains 10 observations column ‘miles per gallon’ (mpg) positive number column ‘miles per gallon’ (mpg) contain datum outside 4 standard deviations mean, vs columns (automatic/manual v/straight engine, respectively) contain 0s 1s written thusly: assertr chain default options, assert, assert_rows, insist, insist_rows, verify stop first assertion yields error go process assertions chain. needs, sensible behavior. times, however, might like get report assertion violations. example, one might want write R program download dataset internet get detailed report deviations expectation. best thing use case, use chain_start, chain_end functions beginning end chain assertr assertions. chain_start gets called data, data gets special tag tells assertr assertions follow override success_fun error_fun values replace success_continue (passes data along test passes) error_append (’ve just discussed). relevant verifications, chain_end receive data (possibly accumulated error messages attached) , default, print report errors found since start chain. Let’s see action! Now assertions checked reported. Tip: can make whole thing look lot better abstracting assertions: Awesome! Now can add arbitrary number assertions, need arises, without touching real logic. Note: default, assertions chain use success_continue error_append functions. allows continue workflow cases aggregate error logs. cases (.e. don’t want include error log just error printed), can require using assertion specific success/error callback chain. Just use skip_chain_opts = TRUE specify callback inside assertion: may also store validation successful results using store_success=TRUE:","code":"mtcars %>%   verify(has_all_names(\"mpg\", \"vs\", \"am\")) %>%   verify(nrow(mtcars) > 10) %>%   verify(mpg > 0) %>%   insist(within_n_sds(4), mpg) %>%   assert(in_set(0,1), am, vs) %>%   group_by(cyl) %>%   summarise(avg.mpg=mean(mpg)) ## # A tibble: 3 × 2 ##     cyl avg.mpg ##   <dbl>   <dbl> ## 1     4    26.7 ## 2     6    19.7 ## 3     8    15.1 mtcars %>%   chain_start %>%   verify(nrow(mtcars) > 10) %>%   verify(mpg > 0) %>%   insist(within_n_sds(4), mpg) %>%   assert(in_set(0,1), am, vs) %>%   chain_end %>%   group_by(cyl) %>%   summarise(avg.mpg=mean(mpg)) ## # A tibble: 3 × 2 ##     cyl avg.mpg ##   <dbl>   <dbl> ## 1     4    26.7 ## 2     6    19.7 ## 3     8    15.1 check_me <- . %>%   chain_start %>%   verify(nrow(mtcars) > 10) %>%   verify(mpg > 0) %>%   insist(within_n_sds(4), mpg) %>%   assert(in_set(0,1), am, vs) %>%   chain_end   mtcars %>%   check_me %>%   group_by(cyl) %>%   summarise(avg.mpg=mean(mpg)) print_error <- function(errors, data=NULL) {   print(errors)   return(data) } mtcars %>%   chain_start %>%   verify(nrow(mtcars) > 32, error_fun=print_error, skip_chain_opts=TRUE) %>%   verify(mpg > 0) %>%   insist(within_n_sds(4), mpg) %>%   assert(in_set(0,1), am, vs) %>%   chain_end mtcars %>%   chain_start(store_success=TRUE) %>%   verify(nrow(mtcars) == 32) %>%   verify(mpg > 0) %>%   insist(within_n_sds(4), mpg) %>%   assert(in_set(0,1), am, vs) %>%   chain_end(success_fun=success_df_return)"},{"path":"https://docs.ropensci.org/assertr/articles/assertr.html","id":"advanced-send-email-reports-using-custom-error-functions","dir":"Articles","previous_headings":"","what":"advanced: send email reports using custom error functions","title":"Assertive R Programming with assertr","text":"One particularly cool application assertr use data integrity checker frequently updated data sources. script can download new data becomes available, run assertr checks . makes assertr sort “continuous integration” tool (data, code.) unsupervised “continuous integration” environment, need way discover assertions failed. CI---service software world, failed automated checks often send email reporting maintainer botched build; bring functionality assertr?! learned last sections, assertion verbs assertr support custom error function. chain_end similarly supports custom error functions. default, error_stop (error_report case chain_end) prints summary errors halts execution. can specify , though, hijack behavior redirect flow--control wherever want. custom error function must take, first argument, list assertr_error S3 objects. second argument must data.frame verb computing . Every error function must take may errors attached data.frame’s assertr_errors attribute leftover previous assertions. going build function takes list assertr_errors, gets string representation errors emails someone halting execution. use mailR package send mail. (particular send.mail formulation work gmail recipients; see mailR documentation information) Now ’ll get notified failed assertions via email. Groovy!","code":"library(mailR)  email_me <- function(list_of_errors, data=NULL, ...){   # we are checking to see if there are any errors that   # are still attached to the data.frame   if(!is.null(data) && !is.null(attr(data, \"assertr_errors\")))     errors <- append(attr(data, \"assertr_errors\"), errors)    num.of.errors <- length(list_of_errors)    preface <- sprintf(\"There %s %d error%s:\\n\",                      ifelse(num.of.errors==1,\"is\", \"are\"),                      num.of.errors,                      ifelse(num.of.errors==1,\"\", \"s\"))    # all `assertr_error` S3 objects have `print` and `summary` methods   # here, we will call `print` on all of the errors since `print`   # will give us the complete/unabridged error report   error_string <- capture.output(tmp <- lapply(list_of_errors,                                                function(x){                                                  cat(\"\\n- \");                                                  print(x);                                                  return();}))   error_string <- c(preface, error_string)   error_string <- error_string %>% paste0(collapse=\"\\n\")    send.mail(from=\"assertr@gmail.com\", to=\"YOU@gmail.com\",             subject=\"error from assertr\", body=error_string,             smtp = list(host.name=\"aspmx.l.google.com\", port=25),             authenticate = FALSE, send=TRUE)   stop(\"assertr stopped execution\", call.=FALSE) }  questionable_mtcars %>%   chain_start %>%   verify(nrow(.) > 10) %>%   insist(within_n_sds(4), mpg) %>%   # ...   chain_end(error_fun=email.me)"},{"path":"https://docs.ropensci.org/assertr/articles/assertr.html","id":"advanced-creating-your-own-predicate-generators-for-insist","dir":"Articles","previous_headings":"","what":"advanced: creating your own predicate generators for insist","title":"Assertive R Programming with assertr","text":"assertr build robustness, correctness, extensibility mind. Just like assertr makes easy create custom predicates, package make easy create custom predicate generators. Okay… , perhaps, easy predicate generators nature functions return functions. ’s possible! Let’s say wanted create predicate generator checks elements vector within 3 times vector’s interquartile range median. need create function looks like Now, can use mpg mtcars like : two problems , though… may want abstract can supply arbitrary number IQRs create bounds lose ability choose optional arguments () give returned within_bounds predicate. Now write function returns function returns function… Much better! Now, want check every mpg mtcars within 5 IQRs median allow NA values can like : Super!","code":"within_3_iqrs <- function(a_vector){   the_median <- median(a_vector)   the_iqr <- IQR(a_vector)   within_bounds((the_median-the_iqr*3), (the_median+the_iqr*3)) } mtcars %>%   insist(within_3_iqrs, mpg) %>%   group_by(cyl) %>%   summarise(avg.mpg=mean(mpg)) ## # A tibble: 3 × 2 ##     cyl avg.mpg ##   <dbl>   <dbl> ## 1     4    26.7 ## 2     6    19.7 ## 3     8    15.1 within_n_iqrs <- function(n, ...){   function(a_vector){     the_median <- median(a_vector)     the_iqr <- IQR(a_vector)     within_bounds((the_median-the_iqr*n), (the_median+the_iqr*n), ...)   } } mtcars %>%   insist(within_n_iqrs(5), mpg) %>%   group_by(cyl) %>%   summarise(avg.mpg=mean(mpg)) ## # A tibble: 3 × 2 ##     cyl avg.mpg ##   <dbl>   <dbl> ## 1     4    26.7 ## 2     6    19.7 ## 3     8    15.1"},{"path":"https://docs.ropensci.org/assertr/articles/assertr.html","id":"advanced-programming-with-assertion-functions","dir":"Articles","previous_headings":"","what":"advanced: programming with assertion functions","title":"Assertive R Programming with assertr","text":"assertion functions use tidyeval framework. past, programming tidyverse-like setting accomplished standard evaluation versions verbs, used functions postfixed underscore: insist_ instead insist, example. However, tidyeval made popular dplyr 0.7.0, usage became deprecated, therefore underscore-postfixed functions longer part assertr.","code":""},{"path":"https://docs.ropensci.org/assertr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Tony Fischetti. Author, maintainer.","code":""},{"path":"https://docs.ropensci.org/assertr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Fischetti T (2024). assertr: Assertive Programming R Analysis Pipelines. R package version 3.0.1https://docs.ropensci.org/assertr/ (website) https://github.com/ropensci/assertr, https://docs.ropensci.org/assertr/ (website)https://github.com/ropensci/assertr.","code":"@Manual{,   title = {assertr: Assertive Programming for R Analysis Pipelines},   author = {Tony Fischetti},   year = {2024},   note = {R package version 3.0.1https://docs.ropensci.org/assertr/ (website) https://github.com/ropensci/assertr},   url = {https://docs.ropensci.org/assertr/ (website) https://github.com/ropensci/assertr}, }"},{"path":"https://docs.ropensci.org/assertr/index.html","id":"assertr","dir":"","previous_headings":"","what":"Assertive Programming for R Analysis Pipelines","title":"Assertive Programming for R Analysis Pipelines","text":"assertr logo","code":""},{"path":"https://docs.ropensci.org/assertr/index.html","id":"what-is-it","dir":"","previous_headings":"","what":"What is it?","title":"Assertive Programming for R Analysis Pipelines","text":"assertr package supplies suite functions designed verify assumptions data early analysis pipeline data errors spotted early can addressed quickly. package need used magrittr/dplyr piping mechanism examples README use clarity.","code":""},{"path":"https://docs.ropensci.org/assertr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Assertive Programming for R Analysis Pipelines","text":"can install latest version CRAN like can install bleeding-edge development version like :","code":"install.packages(\"assertr\") install.packages(\"devtools\")     devtools::install_github(\"ropensci/assertr\")"},{"path":"https://docs.ropensci.org/assertr/index.html","id":"what-does-it-look-like","dir":"","previous_headings":"","what":"What does it look like?","title":"Assertive Programming for R Analysis Pipelines","text":"package offers five assertion functions, assert, verify, insist, assert_rows, insist_rows, designed used shortly data-loading analysis pipeline… Let’s say, example, R’s built-car dataset, mtcars, built-rather procured external source known making errors data entry coding. Pretend wanted find average miles per gallon number engine cylinders. might want first, confirm - columns “mpg”, “vs”, “” - dataset contains 10 observations - column ‘miles per gallon’ (mpg) positive number - column ‘miles per gallon’ (mpg) contain datum outside 4 standard deviations mean, - vs columns (automatic/manual v/straight engine, respectively) contain 0s 1s - row contains 2 NAs - row unique jointly “mpg”, “”, “wt” columns - row’s mahalanobis distance within 10 median absolute deviations distances (outlier detection) written (order) using assertr like : assertions violated, error raised pipeline terminated early. Let’s see error message look like chain bunch failing assertions together.","code":"library(dplyr)     library(assertr)      mtcars %>%       verify(has_all_names(\"mpg\", \"vs\", \"am\", \"wt\")) %>%       verify(nrow(.) > 10) %>%       verify(mpg > 0) %>%       insist(within_n_sds(4), mpg) %>%       assert(in_set(0,1), am, vs) %>%       assert_rows(num_row_NAs, within_bounds(0,2), everything()) %>%       assert_rows(col_concat, is_uniq, mpg, am, wt) %>%       insist_rows(maha_dist, within_n_mads(10), everything()) %>%       group_by(cyl) %>%       summarise(avg.mpg=mean(mpg)) > mtcars %>%     +   chain_start %>%     +   assert(in_set(1, 2, 3, 4), carb) %>%     +   assert_rows(rowMeans, within_bounds(0,5), gear:carb) %>%     +   verify(nrow(.)==10) %>%     +   verify(mpg < 32) %>%     +   chain_end     There are 7 errors across 4 verbs:     -              verb redux_fn           predicate     column index value     1      assert     <NA>  in_set(1, 2, 3, 4)       carb    30   6.0     2      assert     <NA>  in_set(1, 2, 3, 4)       carb    31   8.0     3 assert_rows rowMeans within_bounds(0, 5) ~gear:carb    30   5.5     4 assert_rows rowMeans within_bounds(0, 5) ~gear:carb    31   6.5     5      verify     <NA>       nrow(.) == 10       <NA>     1    NA     6      verify     <NA>            mpg < 32       <NA>    18    NA     7      verify     <NA>            mpg < 32       <NA>    20    NA      Error: assertr stopped execution"},{"path":"https://docs.ropensci.org/assertr/index.html","id":"what-does-assertr-give-me","dir":"","previous_headings":"","what":"What does assertr give me?","title":"Assertive Programming for R Analysis Pipelines","text":"verify - takes data frame (first argument provided %>% operator ), logical (boolean) expression. , verify evaluates expression using scope provided data frame. logical values expression’s result FALSE, verify raise error terminates processing pipeline. assert - takes data frame, predicate function, arbitrary number columns apply predicate function . predicate function (function returns logical/boolean value) applied every element columns selected, raise error finds violations. Internally, assert function uses dplyr’s select function extract columns test predicate function . insist - takes data frame, predicate-generating function, arbitrary number columns. column, predicate-generating function applied, returning predicate. predicate applied every element columns selected, raise error finds violations. reason using predicate-generating function return predicate use value selected rows , example, bounds can dynamically generated based data look like; way , say, create bounds check datum within x z-scores, since standard deviation isn’t known priori. Internally, insist function uses dplyr’s select function extract columns test predicate function . assert_rows - takes data frame, row reduction function, predicate function, arbitrary number columns apply predicate function . row reduction function applied data frame, returns value row. predicate function applied every element vector returned row reduction function, raise error finds violations. functionality useful, example, conjunction num_row_NAs() function ensure certain number missing values row. Internally, assert_rows function uses dplyr’sselect function extract columns test predicate function . insist_rows - takes data frame, row reduction function, predicate-generating function, arbitrary number columns apply predicate function . row reduction function applied data frame, returns value row. predicate-generating function applied vector returned row reduction function resultant predicate applied element vector. raise error finds violations. functionality useful, example, conjunction maha_dist() function ensure flagrant outliers. Internally, assert_rows function uses dplyr’sselect function extract columns test predicate function . assertr also offers four (far) predicate functions designed used assert assert_rows functions: not_na - checks element NA within_bounds - returns predicate function checks numeric value falls within bounds supplied, in_set - returns predicate function checks element member set supplied. (also allows inverse “set”) is_uniq - checks see element appears predicate generators designed used insist insist_rows functions: within_n_sds - used dynamically create bounds check vector elements based standard z-scores within_n_mads - better method dynamically creating bounds check vector elements based ‘robust’ z-scores (using median absolute deviation) following row reduction functions designed used assert_rows insist_rows: num_row_NAs - counts number missing values row maha_dist - computes mahalanobis distance row (outlier detection). coerce categorical variables numerics needs . col_concat - concatenates rows strings duplicated_across_cols - checking row contains duplicated value across columns , finally, utilities use verify has_all_names - check data frame list supplied names has_only_names - check data frame list names requested has_class - checks passed data particular class","code":""},{"path":"https://docs.ropensci.org/assertr/index.html","id":"more-info","dir":"","previous_headings":"","what":"More info","title":"Assertive Programming for R Analysis Pipelines","text":"info, check assertr vignette read ","code":"> vignette(\"assertr\")"},{"path":"https://docs.ropensci.org/assertr/reference/assert.html","id":null,"dir":"Reference","previous_headings":"","what":"Raises error if predicate is FALSE in any columns selected — assert","title":"Raises error if predicate is FALSE in any columns selected — assert","text":"Meant use data analysis pipeline, function just return data supplied FALSEs predicate applied every element columns indicated. element columns, applied predicate, FALSE, function raise error, effectively terminating pipeline early.","code":""},{"path":"https://docs.ropensci.org/assertr/reference/assert.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Raises error if predicate is FALSE in any columns selected — assert","text":"","code":"assert(   data,   predicate,   ...,   success_fun = success_continue,   error_fun = error_stop,   skip_chain_opts = FALSE,   obligatory = FALSE,   defect_fun = defect_append,   description = NA )"},{"path":"https://docs.ropensci.org/assertr/reference/assert.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Raises error if predicate is FALSE in any columns selected — assert","text":"data data frame predicate function returns FALSE violated ... Comma separated list unquoted expressions. Uses dplyr's select select columns data. success_fun Function call assertion passes. Defaults returning data. error_fun Function call assertion fails. Defaults printing summary errors. skip_chain_opts TRUE, success_fun error_fun used even assertion called within chain. obligatory TRUE assertion failed data marked defective. defective data, following rules handled defect_fun function. defect_fun Function call data defective. Defaults skipping assertion storing info special attribute. description Custom description rule. stored result reports data.","code":""},{"path":"https://docs.ropensci.org/assertr/reference/assert.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Raises error if predicate is FALSE in any columns selected — assert","text":"default, data returned predicate assertion         TRUE error thrown . non-default  success_fun error_fun used, return         values function returned.","code":""},{"path":"https://docs.ropensci.org/assertr/reference/assert.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Raises error if predicate is FALSE in any columns selected — assert","text":"examples possible choices success_fun error_fun parameters, run help(\"success_and_error_functions\")","code":""},{"path":"https://docs.ropensci.org/assertr/reference/assert.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Raises error if predicate is FALSE in any columns selected — assert","text":"See vignette(\"assertr\") use context","code":""},{"path":[]},{"path":[]},{"path":"https://docs.ropensci.org/assertr/reference/assert_rows.html","id":null,"dir":"Reference","previous_headings":"","what":"Raises error if predicate is FALSE for any row after applying\nrow reduction function — assert_rows","title":"Raises error if predicate is FALSE for any row after applying\nrow reduction function — assert_rows","text":"Meant use data analysis pipeline, function applies function data frame reduces row single value. , predicate function applied row reduction values. predicate applications yield FALSE, function raise error, effectively terminating pipeline early. FALSEs, function just return data supplied use later parts pipeline.","code":""},{"path":"https://docs.ropensci.org/assertr/reference/assert_rows.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Raises error if predicate is FALSE for any row after applying\nrow reduction function — assert_rows","text":"","code":"assert_rows(   data,   row_reduction_fn,   predicate,   ...,   success_fun = success_continue,   error_fun = error_stop,   skip_chain_opts = FALSE,   obligatory = FALSE,   defect_fun = defect_append,   description = NA )"},{"path":"https://docs.ropensci.org/assertr/reference/assert_rows.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Raises error if predicate is FALSE for any row after applying\nrow reduction function — assert_rows","text":"data data frame row_reduction_fn function returns value row provided data frame predicate function returns FALSE violated ... Comma separated list unquoted expressions. Uses dplyr's select select columns data. success_fun Function call assertion passes. Defaults returning data. error_fun Function call assertion fails. Defaults printing summary errors. skip_chain_opts TRUE, success_fun error_fun used even assertion called within chain. obligatory TRUE assertion failed data marked defective. defective data, following rules handled defect_fun function. defect_fun Function call data defective. Defaults skipping assertion storing info special attribute. description Custom description rule. stored result reports data.","code":""},{"path":"https://docs.ropensci.org/assertr/reference/assert_rows.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Raises error if predicate is FALSE for any row after applying\nrow reduction function — assert_rows","text":"default, data returned predicate assertion         TRUE error thrown . non-default  success_fun error_fun used, return         values function returned.","code":""},{"path":"https://docs.ropensci.org/assertr/reference/assert_rows.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Raises error if predicate is FALSE for any row after applying\nrow reduction function — assert_rows","text":"examples possible choices success_fun error_fun parameters, run help(\"success_and_error_functions\")","code":""},{"path":"https://docs.ropensci.org/assertr/reference/assert_rows.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Raises error if predicate is FALSE for any row after applying\nrow reduction function — assert_rows","text":"See vignette(\"assertr\") use context","code":""},{"path":[]},{"path":[]},{"path":"https://docs.ropensci.org/assertr/reference/assertr.html","id":null,"dir":"Reference","previous_headings":"","what":"assertr: Assertive programming for R analysis pipeline. — assertr","title":"assertr: Assertive programming for R analysis pipeline. — assertr","text":"assertr package supplies suite functions designed verify assumptions data early analysis pipeline. See assertr vignette documentation information  > vignette(\"assertr\")","code":""},{"path":"https://docs.ropensci.org/assertr/reference/assertr.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"assertr: Assertive programming for R analysis pipeline. — assertr","text":"may also want read documentation functions assertr provides: assert verify insist assert_rows insist_rows not_na in_set has_all_names is_uniq num_row_NAs maha_dist col_concat within_bounds within_n_sds within_n_mads success_and_error_functions chaining_functions","code":""},{"path":"https://docs.ropensci.org/assertr/reference/assertr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"assertr: Assertive programming for R analysis pipeline. — assertr","text":"","code":"library(magrittr)     # for the piping operator library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union  # this confirms that #   - that the dataset contains more than 10 observations #   - that the column for 'miles per gallon' (mpg) is a positive number #   - that the column for 'miles per gallon' (mpg) does not contain a datum #     that is outside 4 standard deviations from its mean, and #   - that the am and vs columns (automatic/manual and v/straight engine, #     respectively) contain 0s and 1s only #   - each row contains at most 2 NAs #   - each row's mahalanobis distance is within 10 median absolute deviations of #     all the distance (for outlier detection)  mtcars %>%   verify(nrow(.) > 10) %>%   verify(mpg > 0) %>%   insist(within_n_sds(4), mpg) %>%   assert(in_set(0,1), am, vs) %>%   assert_rows(num_row_NAs, within_bounds(0,2), everything()) %>%   insist_rows(maha_dist, within_n_mads(10), everything()) %>%   group_by(cyl) %>%   summarise(avg.mpg=mean(mpg)) #> # A tibble: 3 × 2 #>     cyl avg.mpg #>   <dbl>   <dbl> #> 1     4    26.7 #> 2     6    19.7 #> 3     8    15.1"},{"path":"https://docs.ropensci.org/assertr/reference/chaining_functions.html","id":null,"dir":"Reference","previous_headings":"","what":"Chaining functions — chaining_functions","title":"Chaining functions — chaining_functions","text":"functions starting ending sequence assertr assertions overriding default behavior assertr halting execution first error.","code":""},{"path":"https://docs.ropensci.org/assertr/reference/chaining_functions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Chaining functions — chaining_functions","text":"","code":"chain_start(data, store_success = FALSE)  chain_end(data, success_fun = success_continue, error_fun = error_report)"},{"path":"https://docs.ropensci.org/assertr/reference/chaining_functions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Chaining functions — chaining_functions","text":"data data frame store_success TRUE successful assertion stored chain. success_fun Function call assertion passes. Defaults returning data. error_fun Function call assertion fails. Defaults printing summary errors.","code":""},{"path":"https://docs.ropensci.org/assertr/reference/chaining_functions.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Chaining functions — chaining_functions","text":"information, read relevant section package's vignette using, vignette(\"assertr\") examples possible choices success_fun error_fun parameters, run help(\"success_and_error_functions\")","code":""},{"path":"https://docs.ropensci.org/assertr/reference/chaining_functions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Chaining functions — chaining_functions","text":"","code":"library(magrittr)  mtcars %>%   chain_start() %>%   verify(nrow(mtcars) > 10) %>%   verify(mpg > 0) %>%   insist(within_n_sds(4), mpg) %>%   assert(in_set(0,1), am, vs) %>%   chain_end() #>                      mpg cyl  disp  hp drat    wt  qsec vs am gear carb #> Mazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4 #> Mazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4 #> Datsun 710          22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1 #> Hornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1 #> Hornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2 #> Valiant             18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1 #> Duster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4 #> Merc 240D           24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2 #> Merc 230            22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2 #> Merc 280            19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4 #> Merc 280C           17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4 #> Merc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3 #> Merc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3 #> Merc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3 #> Cadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4 #> Lincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4 #> Chrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4 #> Fiat 128            32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1 #> Honda Civic         30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2 #> Toyota Corolla      33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1 #> Toyota Corona       21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1 #> Dodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2 #> AMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2 #> Camaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4 #> Pontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2 #> Fiat X1-9           27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1 #> Porsche 914-2       26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2 #> Lotus Europa        30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2 #> Ford Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4 #> Ferrari Dino        19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6 #> Maserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8 #> Volvo 142E          21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2"},{"path":"https://docs.ropensci.org/assertr/reference/col_concat.html","id":null,"dir":"Reference","previous_headings":"","what":"Concatenate all columns of each row in data frame into a string — col_concat","title":"Concatenate all columns of each row in data frame into a string — col_concat","text":"function return vector, length number rows provided data frame. element vector corresponding row values (one column) \"pasted\" together string.","code":""},{"path":"https://docs.ropensci.org/assertr/reference/col_concat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Concatenate all columns of each row in data frame into a string — col_concat","text":"","code":"col_concat(data, sep = \"\")"},{"path":"https://docs.ropensci.org/assertr/reference/col_concat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Concatenate all columns of each row in data frame into a string — col_concat","text":"data data frame sep string separate columns (default: \"\")","code":""},{"path":"https://docs.ropensci.org/assertr/reference/col_concat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Concatenate all columns of each row in data frame into a string — col_concat","text":"vector rows concatenated strings","code":""},{"path":[]},{"path":"https://docs.ropensci.org/assertr/reference/col_concat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Concatenate all columns of each row in data frame into a string — col_concat","text":"","code":"col_concat(mtcars) #>                       Mazda RX4                   Mazda RX4 Wag  #>     \"2161601103.92.6216.460144\"    \"2161601103.92.87517.020144\"  #>                      Datsun 710                  Hornet 4 Drive  #>   \"22.84108933.852.3218.611141\" \"21.462581103.083.21519.441031\"  #>               Hornet Sportabout                         Valiant  #>  \"18.783601753.153.4417.020032\"  \"18.162251052.763.4620.221031\"  #>                      Duster 360                       Merc 240D  #>  \"14.383602453.213.5715.840034\"    \"24.44146.7623.693.19201042\"  #>                        Merc 230                        Merc 280  #>  \"22.84140.8953.923.1522.91042\" \"19.26167.61233.923.4418.31044\"  #>                       Merc 280C                      Merc 450SE  #> \"17.86167.61233.923.4418.91044\" \"16.48275.81803.074.0717.40033\"  #>                      Merc 450SL                     Merc 450SLC  #> \"17.38275.81803.073.7317.60033\"   \"15.28275.81803.073.78180033\"  #>              Cadillac Fleetwood             Lincoln Continental  #>  \"10.484722052.935.2517.980034\"    \"10.4846021535.42417.820034\"  #>               Chrysler Imperial                        Fiat 128  #> \"14.784402303.235.34517.420034\"   \"32.4478.7664.082.219.471141\"  #>                     Honda Civic                  Toyota Corolla  #> \"30.4475.7524.931.61518.521142\"  \"33.9471.1654.221.83519.91141\"  #>                   Toyota Corona                Dodge Challenger  #> \"21.54120.1973.72.46520.011031\"  \"15.583181502.763.5216.870032\"  #>                     AMC Javelin                      Camaro Z28  #>  \"15.283041503.153.43517.30032\"  \"13.383502453.733.8415.410034\"  #>                Pontiac Firebird                       Fiat X1-9  #> \"19.284001753.083.84517.050032\"    \"27.3479664.081.93518.91141\"  #>                   Porsche 914-2                    Lotus Europa  #>    \"264120.3914.432.1416.70152\" \"30.4495.11133.771.51316.91152\"  #>                  Ford Pantera L                    Ferrari Dino  #>   \"15.883512644.223.1714.50154\"   \"19.761451753.622.7715.50156\"  #>                   Maserati Bora                      Volvo 142E  #>     \"1583013353.543.5714.60158\"   \"21.441211094.112.7818.61142\"   library(magrittr)            # for piping operator  # you can use \"assert_rows\", \"is_uniq\", and this function to # check if joint duplicates (across different columns) appear # in a data frame if (FALSE) { mtcars %>%   assert_rows(col_concat, is_uniq, mpg, hp)   # fails because the first two rows are jointly duplicates   # on these two columns }  mtcars %>%   assert_rows(col_concat, is_uniq, mpg, hp, wt) # ok #>                      mpg cyl  disp  hp drat    wt  qsec vs am gear carb #> Mazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4 #> Mazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4 #> Datsun 710          22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1 #> Hornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1 #> Hornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2 #> Valiant             18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1 #> Duster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4 #> Merc 240D           24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2 #> Merc 230            22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2 #> Merc 280            19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4 #> Merc 280C           17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4 #> Merc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3 #> Merc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3 #> Merc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3 #> Cadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4 #> Lincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4 #> Chrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4 #> Fiat 128            32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1 #> Honda Civic         30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2 #> Toyota Corolla      33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1 #> Toyota Corona       21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1 #> Dodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2 #> AMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2 #> Camaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4 #> Pontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2 #> Fiat X1-9           27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1 #> Porsche 914-2       26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2 #> Lotus Europa        30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2 #> Ford Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4 #> Ferrari Dino        19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6 #> Maserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8 #> Volvo 142E          21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2"},{"path":"https://docs.ropensci.org/assertr/reference/duplicates_across_cols.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks if row contains at least one value duplicated in its column — duplicates_across_cols","title":"Checks if row contains at least one value duplicated in its column — duplicates_across_cols","text":"function return vector, length number rows provided data frame. element vector logical value states value row duplicated column.","code":""},{"path":"https://docs.ropensci.org/assertr/reference/duplicates_across_cols.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks if row contains at least one value duplicated in its column — duplicates_across_cols","text":"","code":"duplicates_across_cols(data, allow.na = FALSE)"},{"path":"https://docs.ropensci.org/assertr/reference/duplicates_across_cols.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks if row contains at least one value duplicated in its column — duplicates_across_cols","text":"data data frame allow.na TRUE allow NAs data. Default FALSE.","code":""},{"path":"https://docs.ropensci.org/assertr/reference/duplicates_across_cols.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks if row contains at least one value duplicated in its column — duplicates_across_cols","text":"logical vector.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/assertr/reference/duplicates_across_cols.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Checks if row contains at least one value duplicated in its column — duplicates_across_cols","text":"","code":"df <- data.frame(v1 = c(1, 1, 2, 3), v2 = c(4, 5, 5, 6)) duplicates_across_cols(df) #> [1]  TRUE  TRUE  TRUE FALSE  library(magrittr)            # for piping operator  # you can use \"assert_rows\", \"in_set\", and this function to # check if specified variables set and all subsets are keys for the data.  correct_df <- data.frame(id = 1:5, sub_id = letters[1:5], work_id = LETTERS[1:5]) correct_df %>%   assert_rows(duplicates_across_cols, in_set(FALSE), id, sub_id, work_id) #>   id sub_id work_id #> 1  1      a       A #> 2  2      b       B #> 3  3      c       C #> 4  4      d       D #> 5  5      e       E   # passes because each subset of correct_df variables is key  if (FALSE) { incorrect_df <- data.frame(id = 1:5, sub_id = letters[1:5], age = c(10, 20, 20, 15, 30)) incorrect_df %>%   assert_rows(duplicates_across_cols, in_set(FALSE), id, sub_id, age)   # fails because age is not key of the data (age == 20 is placed twice) }"},{"path":"https://docs.ropensci.org/assertr/reference/generate_id.html","id":null,"dir":"Reference","previous_headings":"","what":"Generates random ID string — generate_id","title":"Generates random ID string — generate_id","text":"used generate id assertion error.","code":""},{"path":"https://docs.ropensci.org/assertr/reference/generate_id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generates random ID string — generate_id","text":"","code":"generate_id()"},{"path":"https://docs.ropensci.org/assertr/reference/generate_id.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generates random ID string — generate_id","text":"single assertion checks multiple columns, error log stored separate element. provide ID allow detecting errors come assertion.","code":""},{"path":"https://docs.ropensci.org/assertr/reference/has_all_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns TRUE if data.frame or list has specified names — has_all_names","title":"Returns TRUE if data.frame or list has specified names — has_all_names","text":"function checks parent frame environment existence names. meant used `assertr`'s `verify` function check existence specific column names `data.frame` piped `verify`. can also work non-`data.frame` list.","code":""},{"path":"https://docs.ropensci.org/assertr/reference/has_all_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns TRUE if data.frame or list has specified names — has_all_names","text":"","code":"has_all_names(...)"},{"path":"https://docs.ropensci.org/assertr/reference/has_all_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Returns TRUE if data.frame or list has specified names — has_all_names","text":"... arbitrary amount quoted names check ","code":""},{"path":"https://docs.ropensci.org/assertr/reference/has_all_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Returns TRUE if data.frame or list has specified names — has_all_names","text":"TRUE names exist, FALSE ","code":""},{"path":[]},{"path":"https://docs.ropensci.org/assertr/reference/has_all_names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Returns TRUE if data.frame or list has specified names — has_all_names","text":"","code":"verify(mtcars, has_all_names(\"mpg\", \"wt\", \"qsec\")) #>                      mpg cyl  disp  hp drat    wt  qsec vs am gear carb #> Mazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4 #> Mazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4 #> Datsun 710          22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1 #> Hornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1 #> Hornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2 #> Valiant             18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1 #> Duster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4 #> Merc 240D           24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2 #> Merc 230            22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2 #> Merc 280            19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4 #> Merc 280C           17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4 #> Merc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3 #> Merc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3 #> Merc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3 #> Cadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4 #> Lincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4 #> Chrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4 #> Fiat 128            32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1 #> Honda Civic         30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2 #> Toyota Corolla      33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1 #> Toyota Corona       21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1 #> Dodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2 #> AMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2 #> Camaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4 #> Pontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2 #> Fiat X1-9           27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1 #> Porsche 914-2       26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2 #> Lotus Europa        30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2 #> Ford Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4 #> Ferrari Dino        19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6 #> Maserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8 #> Volvo 142E          21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2  library(magrittr)   # for pipe operator  if (FALSE) { mtcars %>%   verify(has_all_names(\"mpgg\"))  # fails }  mpgg <- \"something\"  mtcars %>%   verify(exists(\"mpgg\"))   # passes but big mistake #>                      mpg cyl  disp  hp drat    wt  qsec vs am gear carb #> Mazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4 #> Mazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4 #> Datsun 710          22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1 #> Hornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1 #> Hornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2 #> Valiant             18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1 #> Duster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4 #> Merc 240D           24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2 #> Merc 230            22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2 #> Merc 280            19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4 #> Merc 280C           17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4 #> Merc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3 #> Merc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3 #> Merc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3 #> Cadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4 #> Lincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4 #> Chrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4 #> Fiat 128            32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1 #> Honda Civic         30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2 #> Toyota Corolla      33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1 #> Toyota Corona       21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1 #> Dodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2 #> AMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2 #> Camaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4 #> Pontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2 #> Fiat X1-9           27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1 #> Porsche 914-2       26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2 #> Lotus Europa        30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2 #> Ford Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4 #> Ferrari Dino        19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6 #> Maserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8 #> Volvo 142E          21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2  if (FALSE) { mtcars %>%   verify(has_all_names(\"mpgg\")) # correctly fails }"},{"path":"https://docs.ropensci.org/assertr/reference/has_class.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns TRUE if data.frame columns have a specified class — has_class","title":"Returns TRUE if data.frame columns have a specified class — has_class","text":"meant used `assertr`'s `verify` function check existence specific column class `data.frame` piped `verify`.","code":""},{"path":"https://docs.ropensci.org/assertr/reference/has_class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns TRUE if data.frame columns have a specified class — has_class","text":"","code":"has_class(..., class)"},{"path":"https://docs.ropensci.org/assertr/reference/has_class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Returns TRUE if data.frame columns have a specified class — has_class","text":"... arbitrary amount quoted column names check class Expected class chosen columns.","code":""},{"path":"https://docs.ropensci.org/assertr/reference/has_class.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Returns TRUE if data.frame columns have a specified class — has_class","text":"TRUE classes correct, FALSE ","code":""},{"path":"https://docs.ropensci.org/assertr/reference/has_class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Returns TRUE if data.frame columns have a specified class — has_class","text":"","code":"verify(mtcars, has_class(\"mpg\", \"wt\", class = \"numeric\")) #>                      mpg cyl  disp  hp drat    wt  qsec vs am gear carb #> Mazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4 #> Mazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4 #> Datsun 710          22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1 #> Hornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1 #> Hornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2 #> Valiant             18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1 #> Duster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4 #> Merc 240D           24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2 #> Merc 230            22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2 #> Merc 280            19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4 #> Merc 280C           17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4 #> Merc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3 #> Merc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3 #> Merc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3 #> Cadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4 #> Lincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4 #> Chrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4 #> Fiat 128            32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1 #> Honda Civic         30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2 #> Toyota Corolla      33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1 #> Toyota Corona       21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1 #> Dodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2 #> AMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2 #> Camaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4 #> Pontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2 #> Fiat X1-9           27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1 #> Porsche 914-2       26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2 #> Lotus Europa        30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2 #> Ford Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4 #> Ferrari Dino        19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6 #> Maserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8 #> Volvo 142E          21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2  library(magrittr)   # for pipe operator  if (FALSE) { mtcars %>%   verify(has_class(\"mpg\", class = \"character\"))  # fails }"},{"path":"https://docs.ropensci.org/assertr/reference/has_only_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns TRUE if data.frame or list has only the specified names — has_only_names","title":"Returns TRUE if data.frame or list has only the specified names — has_only_names","text":"function checks parent frame environment specific set names; columns present specified, error raised.","code":""},{"path":"https://docs.ropensci.org/assertr/reference/has_only_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns TRUE if data.frame or list has only the specified names — has_only_names","text":"","code":"has_only_names(...)"},{"path":"https://docs.ropensci.org/assertr/reference/has_only_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Returns TRUE if data.frame or list has only the specified names — has_only_names","text":"... arbitrary amount quoted names check ","code":""},{"path":"https://docs.ropensci.org/assertr/reference/has_only_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Returns TRUE if data.frame or list has only the specified names — has_only_names","text":"TRUE names exist, FALSE ","code":""},{"path":"https://docs.ropensci.org/assertr/reference/has_only_names.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Returns TRUE if data.frame or list has only the specified names — has_only_names","text":"meant used `assertr`'s `verify` function check existence specific column names `data.frame` piped `verify`. can also work non-`data.frame` list.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/assertr/reference/has_only_names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Returns TRUE if data.frame or list has only the specified names — has_only_names","text":"","code":"# The last two columns names are switched in order, but all column names are # present, so it passes. verify(   mtcars,   has_only_names(c(     \"mpg\", \"cyl\", \"disp\", \"hp\", \"drat\", \"wt\", \"qsec\", \"vs\", \"am\",     \"carb\", \"gear\"   )) ) #>                      mpg cyl  disp  hp drat    wt  qsec vs am gear carb #> Mazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4 #> Mazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4 #> Datsun 710          22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1 #> Hornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1 #> Hornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2 #> Valiant             18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1 #> Duster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4 #> Merc 240D           24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2 #> Merc 230            22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2 #> Merc 280            19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4 #> Merc 280C           17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4 #> Merc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3 #> Merc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3 #> Merc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3 #> Cadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4 #> Lincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4 #> Chrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4 #> Fiat 128            32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1 #> Honda Civic         30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2 #> Toyota Corolla      33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1 #> Toyota Corona       21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1 #> Dodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2 #> AMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2 #> Camaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4 #> Pontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2 #> Fiat X1-9           27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1 #> Porsche 914-2       26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2 #> Lotus Europa        30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2 #> Ford Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4 #> Ferrari Dino        19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6 #> Maserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8 #> Volvo 142E          21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2  # More than one set of character strings can be provided. verify(   mtcars,   has_only_names(     c(\"mpg\", \"cyl\", \"disp\", \"hp\", \"drat\", \"wt\", \"qsec\", \"vs\", \"am\"),     c(\"carb\", \"gear\")   ) ) #>                      mpg cyl  disp  hp drat    wt  qsec vs am gear carb #> Mazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4 #> Mazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4 #> Datsun 710          22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1 #> Hornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1 #> Hornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2 #> Valiant             18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1 #> Duster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4 #> Merc 240D           24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2 #> Merc 230            22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2 #> Merc 280            19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4 #> Merc 280C           17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4 #> Merc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3 #> Merc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3 #> Merc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3 #> Cadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4 #> Lincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4 #> Chrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4 #> Fiat 128            32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1 #> Honda Civic         30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2 #> Toyota Corolla      33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1 #> Toyota Corona       21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1 #> Dodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2 #> AMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2 #> Camaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4 #> Pontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2 #> Fiat X1-9           27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1 #> Porsche 914-2       26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2 #> Lotus Europa        30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2 #> Ford Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4 #> Ferrari Dino        19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6 #> Maserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8 #> Volvo 142E          21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2  if (FALSE) { # The some columns are missing, so it fails. verify(mtcars, has_only_names(\"mpg\")) }"},{"path":"https://docs.ropensci.org/assertr/reference/in_set.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns TRUE if value in set — in_set","title":"Returns TRUE if value in set — in_set","text":"function returns predicate function take single value return TRUE value member set objects supplied. actually check membership anything--returns function actually checking called value. convenience function meant return predicate function used assertr assertion. can use `inverse` flag (default FALSE) check arguments set.","code":""},{"path":"https://docs.ropensci.org/assertr/reference/in_set.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns TRUE if value in set — in_set","text":"","code":"in_set(..., allow.na = TRUE, inverse = FALSE)"},{"path":"https://docs.ropensci.org/assertr/reference/in_set.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Returns TRUE if value in set — in_set","text":"... objects make set allow.na logical indicating whether NAs (including NaNs) permitted (default TRUE) inverse logical indicating whether test arguments set","code":""},{"path":"https://docs.ropensci.org/assertr/reference/in_set.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Returns TRUE if value in set — in_set","text":"function takes one value returns TRUE         value set defined         arguments supplied in_set FALSE         otherwise","code":""},{"path":[]},{"path":"https://docs.ropensci.org/assertr/reference/in_set.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Returns TRUE if value in set — in_set","text":"","code":"predicate <- in_set(3,4) predicate(4) #> [1] TRUE  ## is equivalent to  in_set(3,4)(3) #> [1] TRUE  # inverting the function works thusly... in_set(3, 4, inverse=TRUE)(c(5, 2, 3)) #> [1]  TRUE  TRUE FALSE # TRUE TRUE FALSE  # the remainder of division by 2 is always 0 or 1 rem <- 10 %% 2 in_set(0,1)(rem) #> [1] TRUE  ## this is meant to be used as a predicate in an assert statement assert(mtcars, in_set(3,4,5), gear) #>                      mpg cyl  disp  hp drat    wt  qsec vs am gear carb #> Mazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4 #> Mazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4 #> Datsun 710          22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1 #> Hornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1 #> Hornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2 #> Valiant             18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1 #> Duster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4 #> Merc 240D           24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2 #> Merc 230            22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2 #> Merc 280            19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4 #> Merc 280C           17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4 #> Merc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3 #> Merc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3 #> Merc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3 #> Cadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4 #> Lincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4 #> Chrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4 #> Fiat 128            32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1 #> Honda Civic         30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2 #> Toyota Corolla      33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1 #> Toyota Corona       21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1 #> Dodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2 #> AMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2 #> Camaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4 #> Pontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2 #> Fiat X1-9           27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1 #> Porsche 914-2       26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2 #> Lotus Europa        30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2 #> Ford Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4 #> Ferrari Dino        19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6 #> Maserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8 #> Volvo 142E          21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2  ## or in a pipeline, like this was meant for  library(magrittr)  mtcars %>%   assert(in_set(3,4,5), gear) %>%   assert(in_set(0,1), vs, am) #>                      mpg cyl  disp  hp drat    wt  qsec vs am gear carb #> Mazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4 #> Mazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4 #> Datsun 710          22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1 #> Hornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1 #> Hornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2 #> Valiant             18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1 #> Duster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4 #> Merc 240D           24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2 #> Merc 230            22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2 #> Merc 280            19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4 #> Merc 280C           17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4 #> Merc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3 #> Merc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3 #> Merc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3 #> Cadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4 #> Lincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4 #> Chrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4 #> Fiat 128            32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1 #> Honda Civic         30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2 #> Toyota Corolla      33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1 #> Toyota Corona       21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1 #> Dodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2 #> AMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2 #> Camaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4 #> Pontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2 #> Fiat X1-9           27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1 #> Porsche 914-2       26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2 #> Lotus Europa        30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2 #> Ford Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4 #> Ferrari Dino        19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6 #> Maserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8 #> Volvo 142E          21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2"},{"path":"https://docs.ropensci.org/assertr/reference/insist.html","id":null,"dir":"Reference","previous_headings":"","what":"Raises error if dynamically created predicate is FALSE in any columns\nselected — insist","title":"Raises error if dynamically created predicate is FALSE in any columns\nselected — insist","text":"Meant use data analysis pipeline, function applies predicate generating function columns indicated. use predicates check every element columns. predicate applications yield FALSE, function raise error, effectively terminating pipeline early. FALSES, function just return data supplied use later parts pipeline.","code":""},{"path":"https://docs.ropensci.org/assertr/reference/insist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Raises error if dynamically created predicate is FALSE in any columns\nselected — insist","text":"","code":"insist(   data,   predicate_generator,   ...,   success_fun = success_continue,   error_fun = error_stop,   skip_chain_opts = FALSE,   obligatory = FALSE,   defect_fun = defect_append,   description = NA )"},{"path":"https://docs.ropensci.org/assertr/reference/insist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Raises error if dynamically created predicate is FALSE in any columns\nselected — insist","text":"data data frame predicate_generator function applied column vectors selected. produce, every column, true predicate function applied every element column vectors selected ... Comma separated list unquoted expressions. Uses dplyr's select select columns data. success_fun Function call assertion passes. Defaults returning data. error_fun Function call assertion fails. Defaults printing summary errors. skip_chain_opts TRUE, success_fun error_fun used even assertion called within chain. obligatory TRUE assertion failed data marked defective. defective data, following rules handled defect_fun function. defect_fun Function call data defective. Defaults skipping assertion storing info special attribute. description Custom description rule. stored result reports data.","code":""},{"path":"https://docs.ropensci.org/assertr/reference/insist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Raises error if dynamically created predicate is FALSE in any columns\nselected — insist","text":"default, data returned dynamically created         predicate assertion TRUE error thrown .         non-default success_fun error_fun used,         return values function returned.","code":""},{"path":"https://docs.ropensci.org/assertr/reference/insist.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Raises error if dynamically created predicate is FALSE in any columns\nselected — insist","text":"examples possible choices success_fun error_fun parameters, run help(\"success_and_error_functions\")","code":""},{"path":"https://docs.ropensci.org/assertr/reference/insist.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Raises error if dynamically created predicate is FALSE in any columns\nselected — insist","text":"See vignette(\"assertr\") use context","code":""},{"path":[]},{"path":[]},{"path":"https://docs.ropensci.org/assertr/reference/insist_rows.html","id":null,"dir":"Reference","previous_headings":"","what":"Raises error if dynamically created predicate is FALSE for any row\nafter applying row reduction function — insist_rows","title":"Raises error if dynamically created predicate is FALSE for any row\nafter applying row reduction function — insist_rows","text":"Meant use data analysis pipeline, function applies function data frame reduces row single value. , predicate generating function applied row reduction values. use predicates check row reduction values. predicate applications yield FALSE, function raise error, effectively terminating pipeline early. FALSEs, function just return data supplied use later parts pipeline.","code":""},{"path":"https://docs.ropensci.org/assertr/reference/insist_rows.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Raises error if dynamically created predicate is FALSE for any row\nafter applying row reduction function — insist_rows","text":"","code":"insist_rows(   data,   row_reduction_fn,   predicate_generator,   ...,   success_fun = success_continue,   error_fun = error_stop,   skip_chain_opts = FALSE,   obligatory = FALSE,   defect_fun = defect_append,   description = NA )"},{"path":"https://docs.ropensci.org/assertr/reference/insist_rows.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Raises error if dynamically created predicate is FALSE for any row\nafter applying row reduction function — insist_rows","text":"data data frame row_reduction_fn function returns value row provided data frame predicate_generator function applied results row reduction function. produce, true predicate function applied every element vector row reduction function returns. ... Comma separated list unquoted expressions. Uses dplyr's select select columns data. success_fun Function call assertion passes. Defaults returning data. error_fun Function call assertion fails. Defaults printing summary errors. skip_chain_opts TRUE, success_fun error_fun used even assertion called within chain. obligatory TRUE assertion failed data marked defective. defective data, following rules handled defect_fun function. defect_fun Function call data defective. Defaults skipping assertion storing info special attribute. description Custom description rule. stored result reports data.","code":""},{"path":"https://docs.ropensci.org/assertr/reference/insist_rows.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Raises error if dynamically created predicate is FALSE for any row\nafter applying row reduction function — insist_rows","text":"default, data returned dynamically created         predicate assertion TRUE error thrown .         non-default success_fun error_fun used,         return values function returned.","code":""},{"path":"https://docs.ropensci.org/assertr/reference/insist_rows.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Raises error if dynamically created predicate is FALSE for any row\nafter applying row reduction function — insist_rows","text":"examples possible choices success_fun error_fun parameters, run help(\"success_and_error_functions\")","code":""},{"path":"https://docs.ropensci.org/assertr/reference/insist_rows.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Raises error if dynamically created predicate is FALSE for any row\nafter applying row reduction function — insist_rows","text":"See vignette(\"assertr\") use context","code":""},{"path":[]},{"path":[]},{"path":"https://docs.ropensci.org/assertr/reference/is_uniq.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns TRUE where no elements appear more than once — is_uniq","title":"Returns TRUE where no elements appear more than once — is_uniq","text":"function meant take vector. relies heavily duplicated function can thought inverse. function differs, though--besides meant one vector column--marks first occurrence duplicated value \"non unique\", well.","code":""},{"path":"https://docs.ropensci.org/assertr/reference/is_uniq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns TRUE where no elements appear more than once — is_uniq","text":"","code":"is_uniq(..., allow.na = FALSE)"},{"path":"https://docs.ropensci.org/assertr/reference/is_uniq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Returns TRUE where no elements appear more than once — is_uniq","text":"... One vectors check unique combinations elements allow.na logical indicating whether NAs preserved missing values return value (FALSE) treated just like value (TRUE) (default FALSE)","code":""},{"path":"https://docs.ropensci.org/assertr/reference/is_uniq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Returns TRUE where no elements appear more than once — is_uniq","text":"vector length corresponding element         TRUE element appears vector         FALSE otherwise","code":""},{"path":[]},{"path":"https://docs.ropensci.org/assertr/reference/is_uniq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Returns TRUE where no elements appear more than once — is_uniq","text":"","code":"is_uniq(1:10) #>  [1] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE is_uniq(c(1,1,2,3), c(1,2,2,3)) #> [1] TRUE TRUE TRUE TRUE  if (FALSE) { # returns FALSE where a \"5\" appears is_uniq(c(1:10, 5)) }  library(magrittr)  if (FALSE) { # this fails 4 times mtcars %>% assert(is_uniq, qsec) }  # to use the version of this function that allows NAs in `assert`, # you can use a lambda/anonymous function like so:  mtcars %>%   assert(function(x){is_uniq(x, allow.na=TRUE)}, qsec) #>                      mpg cyl  disp  hp drat    wt  qsec vs am gear carb #> Mazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4 #> Mazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4 #> Datsun 710          22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1 #> Hornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1 #> Hornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2 #> Valiant             18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1 #> Duster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4 #> Merc 240D           24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2 #> Merc 230            22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2 #> Merc 280            19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4 #> Merc 280C           17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4 #> Merc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3 #> Merc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3 #> Merc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3 #> Cadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4 #> Lincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4 #> Chrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4 #> Fiat 128            32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1 #> Honda Civic         30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2 #> Toyota Corolla      33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1 #> Toyota Corona       21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1 #> Dodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2 #> AMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2 #> Camaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4 #> Pontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2 #> Fiat X1-9           27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1 #> Porsche 914-2       26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2 #> Lotus Europa        30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2 #> Ford Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4 #> Ferrari Dino        19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6 #> Maserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8 #> Volvo 142E          21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2"},{"path":"https://docs.ropensci.org/assertr/reference/maha_dist.html","id":null,"dir":"Reference","previous_headings":"","what":"Computes mahalanobis distance for each row of data frame — maha_dist","title":"Computes mahalanobis distance for each row of data frame — maha_dist","text":"function return vector, length number rows provided data frame, corresponding average mahalanobis distances row whole data set.","code":""},{"path":"https://docs.ropensci.org/assertr/reference/maha_dist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Computes mahalanobis distance for each row of data frame — maha_dist","text":"","code":"maha_dist(data, keep.NA = TRUE, robust = FALSE, stringsAsFactors = FALSE)"},{"path":"https://docs.ropensci.org/assertr/reference/maha_dist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Computes mahalanobis distance for each row of data frame — maha_dist","text":"data data frame keep.NA Ensure every row missing data remains NA output? TRUE default. robust Attempt compute mahalanobis distance based robust covariance matrix? FALSE default stringsAsFactors Convert non-factor string columns factors? FALSE default","code":""},{"path":"https://docs.ropensci.org/assertr/reference/maha_dist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Computes mahalanobis distance for each row of data frame — maha_dist","text":"vector observation-wise mahalanobis distances.","code":""},{"path":"https://docs.ropensci.org/assertr/reference/maha_dist.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Computes mahalanobis distance for each row of data frame — maha_dist","text":"useful finding anomalous observations, row-wise. convert categorical variables data frame numerics long factors. example, order character column used component distance calculations, must either factor, converted factor using stringsAsFactors parameter.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/assertr/reference/maha_dist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Computes mahalanobis distance for each row of data frame — maha_dist","text":"","code":"maha_dist(mtcars) #>  [1]  8.946673  8.287933  8.937150  6.096726  5.429061  8.877558  9.136276 #>  [8] 10.030345 22.593116 12.393107 11.058878  9.476126  5.594527  6.026462 #> [15] 11.201310  8.672093 12.257618  9.078630 14.954377 10.296463 13.432391 #> [22]  6.227235  5.786691 11.681526  6.718085  3.645789 18.356164 14.000669 #> [29] 21.573003 11.152850 19.192384  9.888781  maha_dist(iris, robust=TRUE) #>   [1]  7.181303 14.209332  9.233412 14.029571  6.547538  9.032628  9.557745 #>   [8]  9.434082 16.327924 14.609934  7.944119 12.241370 14.152604 10.634152 #>  [15]  8.940285  9.311006  7.996840  7.676170 10.686693  6.772707 14.171183 #>  [22]  8.199367  4.819010 17.927827 21.970559 17.509804 12.134829  8.718618 #>  [29]  8.664029 14.539774 15.467206 13.918214 12.751421  7.800228 13.513486 #>  [36]  9.613279  9.535921  8.718478 13.079168  9.504772  7.041884 36.721567 #>  [43] 10.581647 18.598838 14.208248 15.428511  9.871731 10.898606  7.630712 #>  [50]  9.183846 12.142542  5.700266 15.153194  9.430086 12.108781 11.172977 #>  [57]  9.444704  5.395403 11.484362  7.646899 10.479824  5.254603 14.996254 #>  [64] 11.744912  2.849079  6.677997 10.917922  9.978773 24.822657  4.694515 #>  [71] 20.355909  3.146007 22.559940 18.395726  5.389387  6.864585 17.525227 #>  [78] 19.539023  8.151810  3.098777  4.944060  5.362978  2.057880 26.155842 #>  [85] 14.053245  8.768882 10.215374 17.593198  3.270086  5.936323 13.524049 #>  [92]  8.625081  3.824912  5.800611  5.591581  5.707430  3.987159  4.389560 #>  [99]  9.471902  3.068005 30.970783 32.288310 16.382188 27.303966 18.252965 #> [106] 14.211336 57.834820 27.316610 17.104499 29.976800 42.865459 24.851409 #> [113] 25.740563 34.263970 56.920919 43.839091 29.769508 30.314755  8.766718 #> [120] 35.514678 27.338244 44.696221 18.955613 38.729456 26.599257 32.185485 #> [127] 44.286331 45.304056 18.655092 42.634687 19.136274 40.640072 20.651593 #> [134] 46.870404 53.923075 20.573812 41.472972 33.431351 49.320574 31.907998 #> [141] 34.144669 57.844485 32.288310 20.731382 39.082779 47.916444 32.925457 #> [148] 34.182320 45.599451 41.065734   library(magrittr)            # for piping operator library(dplyr)               # for \"everything()\" function  # using every column from mtcars, compute mahalanobis distance # for each observation, and ensure that each distance is within 10 # median absolute deviations from the median mtcars %>%   insist_rows(maha_dist, within_n_mads(10), everything()) #>                      mpg cyl  disp  hp drat    wt  qsec vs am gear carb #> Mazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4 #> Mazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4 #> Datsun 710          22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1 #> Hornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1 #> Hornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2 #> Valiant             18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1 #> Duster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4 #> Merc 240D           24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2 #> Merc 230            22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2 #> Merc 280            19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4 #> Merc 280C           17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4 #> Merc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3 #> Merc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3 #> Merc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3 #> Cadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4 #> Lincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4 #> Chrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4 #> Fiat 128            32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1 #> Honda Civic         30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2 #> Toyota Corolla      33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1 #> Toyota Corona       21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1 #> Dodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2 #> AMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2 #> Camaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4 #> Pontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2 #> Fiat X1-9           27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1 #> Porsche 914-2       26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2 #> Lotus Europa        30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2 #> Ford Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4 #> Ferrari Dino        19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6 #> Maserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8 #> Volvo 142E          21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2   ## anything here will run"},{"path":"https://docs.ropensci.org/assertr/reference/not_na.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns TRUE if value is not NA — not_na","title":"Returns TRUE if value is not NA — not_na","text":"inverse .na. convenience function meant used predicate assertr assertion.","code":""},{"path":"https://docs.ropensci.org/assertr/reference/not_na.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns TRUE if value is not NA — not_na","text":"","code":"not_na(x, allow.NaN = FALSE)"},{"path":"https://docs.ropensci.org/assertr/reference/not_na.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Returns TRUE if value is not NA — not_na","text":"x R object supports .na .nan allow.NaN logical indicating whether NaNs allowed (default FALSE)","code":""},{"path":"https://docs.ropensci.org/assertr/reference/not_na.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Returns TRUE if value is not NA — not_na","text":"vector length TRUE element NA FALSE otherwise","code":""},{"path":[]},{"path":"https://docs.ropensci.org/assertr/reference/not_na.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Returns TRUE if value is not NA — not_na","text":"","code":"not_na(NA) #> [1] FALSE not_na(2.8) #> [1] TRUE not_na(\"tree\") #> [1] TRUE not_na(c(1, 2, NA, 4)) #> [1]  TRUE  TRUE FALSE  TRUE"},{"path":"https://docs.ropensci.org/assertr/reference/num_row_NAs.html","id":null,"dir":"Reference","previous_headings":"","what":"Counts number of NAs in each row — num_row_NAs","title":"Counts number of NAs in each row — num_row_NAs","text":"function return vector, length number rows provided data frame, corresponding number missing values row","code":""},{"path":"https://docs.ropensci.org/assertr/reference/num_row_NAs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Counts number of NAs in each row — num_row_NAs","text":"","code":"num_row_NAs(data, allow.NaN = FALSE)"},{"path":"https://docs.ropensci.org/assertr/reference/num_row_NAs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Counts number of NAs in each row — num_row_NAs","text":"data data frame allow.NaN Treat NaN like NA (counting ). FALSE default","code":""},{"path":"https://docs.ropensci.org/assertr/reference/num_row_NAs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Counts number of NAs in each row — num_row_NAs","text":"vector number missing values row","code":""},{"path":[]},{"path":"https://docs.ropensci.org/assertr/reference/num_row_NAs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Counts number of NAs in each row — num_row_NAs","text":"","code":"num_row_NAs(mtcars) #>           Mazda RX4       Mazda RX4 Wag          Datsun 710      Hornet 4 Drive  #>                   0                   0                   0                   0  #>   Hornet Sportabout             Valiant          Duster 360           Merc 240D  #>                   0                   0                   0                   0  #>            Merc 230            Merc 280           Merc 280C          Merc 450SE  #>                   0                   0                   0                   0  #>          Merc 450SL         Merc 450SLC  Cadillac Fleetwood Lincoln Continental  #>                   0                   0                   0                   0  #>   Chrysler Imperial            Fiat 128         Honda Civic      Toyota Corolla  #>                   0                   0                   0                   0  #>       Toyota Corona    Dodge Challenger         AMC Javelin          Camaro Z28  #>                   0                   0                   0                   0  #>    Pontiac Firebird           Fiat X1-9       Porsche 914-2        Lotus Europa  #>                   0                   0                   0                   0  #>      Ford Pantera L        Ferrari Dino       Maserati Bora          Volvo 142E  #>                   0                   0                   0                   0    library(magrittr)            # for piping operator library(dplyr)               # for \"everything()\" function  # using every column from mtcars, make sure there are at most # 2 NAs in each row. If there are any more than two, error out mtcars %>%   assert_rows(num_row_NAs, within_bounds(0,2), everything()) #>                      mpg cyl  disp  hp drat    wt  qsec vs am gear carb #> Mazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4 #> Mazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4 #> Datsun 710          22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1 #> Hornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1 #> Hornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2 #> Valiant             18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1 #> Duster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4 #> Merc 240D           24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2 #> Merc 230            22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2 #> Merc 280            19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4 #> Merc 280C           17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4 #> Merc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3 #> Merc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3 #> Merc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3 #> Cadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4 #> Lincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4 #> Chrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4 #> Fiat 128            32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1 #> Honda Civic         30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2 #> Toyota Corolla      33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1 #> Toyota Corona       21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1 #> Dodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2 #> AMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2 #> Camaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4 #> Pontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2 #> Fiat X1-9           27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1 #> Porsche 914-2       26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2 #> Lotus Europa        30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2 #> Ford Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4 #> Ferrari Dino        19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6 #> Maserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8 #> Volvo 142E          21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2   ## anything here will run"},{"path":"https://docs.ropensci.org/assertr/reference/print.assertr_assert_error.html","id":null,"dir":"Reference","previous_headings":"","what":"Printing assertr's assert errors — print.assertr_assert_error","title":"Printing assertr's assert errors — print.assertr_assert_error","text":"`print` method class \"assertr_assert_error\" prints error message entire two-column `data.frame` holding indexes values offending data.","code":""},{"path":"https://docs.ropensci.org/assertr/reference/print.assertr_assert_error.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Printing assertr's assert errors — print.assertr_assert_error","text":"","code":"# S3 method for assertr_assert_error print(x, ...)"},{"path":"https://docs.ropensci.org/assertr/reference/print.assertr_assert_error.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Printing assertr's assert errors — print.assertr_assert_error","text":"x assertr_assert_error object ... arguments passed methods","code":""},{"path":[]},{"path":"https://docs.ropensci.org/assertr/reference/print.assertr_defect.html","id":null,"dir":"Reference","previous_headings":"","what":"Printing assertr's defect — print.assertr_defect","title":"Printing assertr's defect — print.assertr_defect","text":"`print` method class \"assertr_defect\" prints defect message along columns checked.","code":""},{"path":"https://docs.ropensci.org/assertr/reference/print.assertr_defect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Printing assertr's defect — print.assertr_defect","text":"","code":"# S3 method for assertr_defect print(x, ...)"},{"path":"https://docs.ropensci.org/assertr/reference/print.assertr_defect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Printing assertr's defect — print.assertr_defect","text":"x assertr_defect object ... arguments passed methods","code":""},{"path":"https://docs.ropensci.org/assertr/reference/print.assertr_success.html","id":null,"dir":"Reference","previous_headings":"","what":"Printing assertr's success — print.assertr_success","title":"Printing assertr's success — print.assertr_success","text":"`print` method class \"assertr_success\" prints success message along columns checked.","code":""},{"path":"https://docs.ropensci.org/assertr/reference/print.assertr_success.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Printing assertr's success — print.assertr_success","text":"","code":"# S3 method for assertr_success print(x, ...)"},{"path":"https://docs.ropensci.org/assertr/reference/print.assertr_success.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Printing assertr's success — print.assertr_success","text":"x assertr_success object ... arguments passed methods","code":""},{"path":"https://docs.ropensci.org/assertr/reference/print.assertr_verify_error.html","id":null,"dir":"Reference","previous_headings":"","what":"Printing assertr's verify errors — print.assertr_verify_error","title":"Printing assertr's verify errors — print.assertr_verify_error","text":"`summary` method class \"assertr_verify_error\"","code":""},{"path":"https://docs.ropensci.org/assertr/reference/print.assertr_verify_error.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Printing assertr's verify errors — print.assertr_verify_error","text":"","code":"# S3 method for assertr_verify_error print(x, ...)"},{"path":"https://docs.ropensci.org/assertr/reference/print.assertr_verify_error.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Printing assertr's verify errors — print.assertr_verify_error","text":"x assertr_verify_error object. ... arguments passed methods","code":""},{"path":[]},{"path":"https://docs.ropensci.org/assertr/reference/success_and_error_functions.html","id":null,"dir":"Reference","previous_headings":"","what":"Success and error functions — success_and_error_functions","title":"Success and error functions — success_and_error_functions","text":"behavior functions like assert, assert_rows, insist, insist_rows, verify assertion passes fails configurable via success_fun error_fun parameters, respectively. success_fun parameter takes function takes data passed assertion function parameter. can write success handler function, provided package: success_continue - just returns data                                    passed assertion function success_logical - returns TRUE success_append - returns data                                 passed assertion function                                 also stores basic information                                 verification result success_report - success results stored,                                 verification ended success prints                                 summary successful validations success_df_return - success results stored,                                    verification ended success prints                                    data.frame verification results error_fun parameter takes function takes data passed assertion function parameter. can write error handler function, provided package: error_stop - Prints summary errors                             halts execution. error_report - Prints information available                               errors \"tidy\"                               data.frame (including information                               name predicate used,                               offending value, etc...) halts                               execution. error_append - Attaches errors special    attribute data returns data. chiefly    allow assertr errors accumulated pipeline    assertions can chance checked    errors can displayed end chain. error_return - Returns raw object containing     errors error_df_return - Returns \"tidy\" data.frame     containing errors, including informations     name predicate used, offending value, etc... error_logical - returns FALSE just_warn - Prints summary errors    halt execution, just issues warning. warn_report - Prints information available   errors halt execution, just issues warning. defect_report - single rule defective data displays   short info skipping current assertion. chain_end sums   skipped rules defective data. defect_df_return - single rule defective data returns   info data.frame skipping current assertion. chain_end   returns skipped rules info data.frame defective data. may find third type data verification result. scenario validation rule obligatory (obligatory = TRUE) order execute following ones may want skip register fact. order three callbacks reacting defective data: defect_report - single rule defective data displays   short info skipping current assertion. defect_df_return - single rule defective data returns   info data.frame skipping current assertion. defect_append - Appends info skipped rule due data   defect one data attributes. Rules skipped defective data, summary, can   returned proper error_fun callback chain_end.","code":""},{"path":"https://docs.ropensci.org/assertr/reference/success_and_error_functions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Success and error functions — success_and_error_functions","text":"","code":"success_logical(data, ...)  success_continue(data, ...)  success_append(data, ...)  success_report(data, ...)  success_df_return(data, ...)  error_stop(errors, data = NULL, warn = FALSE, ...)  just_warn(errors, data = NULL)  error_report(errors, data = NULL, warn = FALSE, ...)  warn_report(errors, data = NULL)  error_append(errors, data = NULL)  warning_append(errors, data = NULL)  error_return(errors, data = NULL)  error_df_return(errors, data = NULL)  error_logical(errors, data = NULL, ...)  defect_append(errors, data, ...)  defect_report(errors, data, ...)  defect_df_return(errors, data, ...)"},{"path":"https://docs.ropensci.org/assertr/reference/success_and_error_functions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Success and error functions — success_and_error_functions","text":"data data frame ... arguments passed methods errors list objects class assertr_errors warn TRUE, assertr issue warning instead error","code":""},{"path":"https://docs.ropensci.org/assertr/reference/summary.assertr_assert_error.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarizing assertr's assert errors — summary.assertr_assert_error","title":"Summarizing assertr's assert errors — summary.assertr_assert_error","text":"`summary` method class \"assertr_assert_error\" prints error message first five rows two-column `data.frame` holding indexes values offending data.","code":""},{"path":"https://docs.ropensci.org/assertr/reference/summary.assertr_assert_error.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarizing assertr's assert errors — summary.assertr_assert_error","text":"","code":"# S3 method for assertr_assert_error summary(object, ...)"},{"path":"https://docs.ropensci.org/assertr/reference/summary.assertr_assert_error.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarizing assertr's assert errors — summary.assertr_assert_error","text":"object assertr_assert_error object ... Additional arguments affecting summary produced","code":""},{"path":[]},{"path":"https://docs.ropensci.org/assertr/reference/summary.assertr_verify_error.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarizing assertr's verify errors — summary.assertr_verify_error","title":"Summarizing assertr's verify errors — summary.assertr_verify_error","text":"`summary` method class \"assertr_verify_error\"","code":""},{"path":"https://docs.ropensci.org/assertr/reference/summary.assertr_verify_error.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarizing assertr's verify errors — summary.assertr_verify_error","text":"","code":"# S3 method for assertr_verify_error summary(object, ...)"},{"path":"https://docs.ropensci.org/assertr/reference/summary.assertr_verify_error.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarizing assertr's verify errors — summary.assertr_verify_error","text":"object assertr_verify_error object ... Additional arguments affecting summary produced","code":""},{"path":[]},{"path":"https://docs.ropensci.org/assertr/reference/verify.html","id":null,"dir":"Reference","previous_headings":"","what":"Raises error if expression is FALSE anywhere — verify","title":"Raises error if expression is FALSE anywhere — verify","text":"Meant use data analysis pipeline, function just return data supplied logicals expression supplied TRUE. least one FALSE, function raise error, effectively terminating pipeline early","code":""},{"path":"https://docs.ropensci.org/assertr/reference/verify.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Raises error if expression is FALSE anywhere — verify","text":"","code":"verify(   data,   expr,   success_fun = success_continue,   error_fun = error_stop,   skip_chain_opts = FALSE,   obligatory = FALSE,   defect_fun = defect_append,   description = NA )"},{"path":"https://docs.ropensci.org/assertr/reference/verify.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Raises error if expression is FALSE anywhere — verify","text":"data data frame, list, environment expr logical expression success_fun Function call assertion passes. Defaults returning data. error_fun Function call assertion fails. Defaults printing summary errors. skip_chain_opts TRUE, success_fun error_fun used even assertion called within chain. obligatory TRUE assertion failed data marked defective. defective data, following rules handled defect_fun function. defect_fun Function call data defective. Defaults skipping assertion storing info special attribute. description Custom description rule. stored result reports data.","code":""},{"path":"https://docs.ropensci.org/assertr/reference/verify.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Raises error if expression is FALSE anywhere — verify","text":"default, data returned predicate assertion         TRUE error thrown . non-default  success_fun error_fun used, return         values function returned.","code":""},{"path":"https://docs.ropensci.org/assertr/reference/verify.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Raises error if expression is FALSE anywhere — verify","text":"examples possible choices success_fun error_fun parameters, run help(\"success_and_error_functions\")","code":""},{"path":"https://docs.ropensci.org/assertr/reference/verify.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Raises error if expression is FALSE anywhere — verify","text":"See vignette(\"assertr\") use context","code":""},{"path":[]},{"path":[]},{"path":"https://docs.ropensci.org/assertr/reference/within_bounds.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates bounds checking predicate — within_bounds","title":"Creates bounds checking predicate — within_bounds","text":"function returns predicate function take numeric value vector return TRUE value(s) /within bounds set. actually check bounds anything--returns function actually checking called number. convenience function meant return predicate function used assertr assertion.","code":""},{"path":"https://docs.ropensci.org/assertr/reference/within_bounds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates bounds checking predicate — within_bounds","text":"","code":"within_bounds(   lower.bound,   upper.bound,   include.lower = TRUE,   include.upper = TRUE,   allow.na = TRUE,   check.class = TRUE )"},{"path":"https://docs.ropensci.org/assertr/reference/within_bounds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates bounds checking predicate — within_bounds","text":"lower.bound lowest permitted value upper.bound upper permitted value include.lower logical indicating whether lower bound inclusive (default TRUE) include.upper logical indicating whether upprt bound inclusive (default TRUE) allow.na logical indicating whether NAs (including NaNs) permitted (default TRUE) check.class class lower.bound, upper_bound, input returned function checked numeric class?  FALSE, comparison may unexpected results.","code":""},{"path":"https://docs.ropensci.org/assertr/reference/within_bounds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates bounds checking predicate — within_bounds","text":"function takes numeric value numeric vactor returns         TRUE value(s) /within bounds defined         arguments supplied within_bounds FALSE         otherwise","code":""},{"path":"https://docs.ropensci.org/assertr/reference/within_bounds.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creates bounds checking predicate — within_bounds","text":"","code":"predicate <- within_bounds(3,4) predicate(pi) #> [1] TRUE  ## is equivalent to  within_bounds(3,4)(pi) #> [1] TRUE  # a correlation coefficient must always be between 0 and 1 coeff <- cor.test(c(1,2,3), c(.5, 2.4, 4))[[\"estimate\"]] within_bounds(0,1)(coeff) #>  cor  #> TRUE   ## check for positive number positivep <- within_bounds(0, Inf, include.lower=FALSE)  ## this is meant to be used as a predicate in an assert statement assert(mtcars, within_bounds(4,8), cyl) #>                      mpg cyl  disp  hp drat    wt  qsec vs am gear carb #> Mazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4 #> Mazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4 #> Datsun 710          22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1 #> Hornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1 #> Hornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2 #> Valiant             18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1 #> Duster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4 #> Merc 240D           24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2 #> Merc 230            22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2 #> Merc 280            19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4 #> Merc 280C           17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4 #> Merc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3 #> Merc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3 #> Merc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3 #> Cadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4 #> Lincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4 #> Chrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4 #> Fiat 128            32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1 #> Honda Civic         30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2 #> Toyota Corolla      33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1 #> Toyota Corona       21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1 #> Dodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2 #> AMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2 #> Camaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4 #> Pontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2 #> Fiat X1-9           27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1 #> Porsche 914-2       26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2 #> Lotus Europa        30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2 #> Ford Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4 #> Ferrari Dino        19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6 #> Maserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8 #> Volvo 142E          21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2  ## or in a pipeline  library(magrittr)  mtcars %>%   assert(within_bounds(4,8), cyl) #>                      mpg cyl  disp  hp drat    wt  qsec vs am gear carb #> Mazda RX4           21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4 #> Mazda RX4 Wag       21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4 #> Datsun 710          22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1 #> Hornet 4 Drive      21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1 #> Hornet Sportabout   18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2 #> Valiant             18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1 #> Duster 360          14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4 #> Merc 240D           24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2 #> Merc 230            22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2 #> Merc 280            19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4 #> Merc 280C           17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4 #> Merc 450SE          16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3 #> Merc 450SL          17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3 #> Merc 450SLC         15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3 #> Cadillac Fleetwood  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4 #> Lincoln Continental 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4 #> Chrysler Imperial   14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4 #> Fiat 128            32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1 #> Honda Civic         30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2 #> Toyota Corolla      33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1 #> Toyota Corona       21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1 #> Dodge Challenger    15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2 #> AMC Javelin         15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2 #> Camaro Z28          13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4 #> Pontiac Firebird    19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2 #> Fiat X1-9           27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1 #> Porsche 914-2       26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2 #> Lotus Europa        30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2 #> Ford Pantera L      15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4 #> Ferrari Dino        19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6 #> Maserati Bora       15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8 #> Volvo 142E          21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2"},{"path":"https://docs.ropensci.org/assertr/reference/within_n_mads.html","id":null,"dir":"Reference","previous_headings":"","what":"Return a function to create robust z-score checking predicate — within_n_mads","title":"Return a function to create robust z-score checking predicate — within_n_mads","text":"function takes one argument, number median absolute deviations within accept particular data point. generally useful sister function within_n_sds robust presence outliers. therefore better suited identify potentially erroneous data points.","code":""},{"path":"https://docs.ropensci.org/assertr/reference/within_n_mads.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return a function to create robust z-score checking predicate — within_n_mads","text":"","code":"within_n_mads(n, ...)"},{"path":"https://docs.ropensci.org/assertr/reference/within_n_mads.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return a function to create robust z-score checking predicate — within_n_mads","text":"n number median absolute deviations median within accept datum ... Additional arguments passed within_bounds","code":""},{"path":"https://docs.ropensci.org/assertr/reference/within_n_mads.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return a function to create robust z-score checking predicate — within_n_mads","text":"function takes vector returns  within_bounds predicate based MAD         vector.","code":""},{"path":"https://docs.ropensci.org/assertr/reference/within_n_mads.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Return a function to create robust z-score checking predicate — within_n_mads","text":"example, '2' passed function, return function takes vector figures bounds two median absolute deviations (MADs) median. function return within_bounds function can applied single datum. datum within two MADs median vector given function returned function, return TRUE. , FALSE. function meant used , although can. Rather, function meant used insist function search potentially erroneous data points data set.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/assertr/reference/within_n_mads.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return a function to create robust z-score checking predicate — within_n_mads","text":"","code":"test.vector <- rnorm(100, mean=100, sd=20)  within.one.mad <- within_n_mads(1) custom.bounds.checker <- within.one.mad(test.vector) custom.bounds.checker(105)     # returns TRUE #> [1] TRUE custom.bounds.checker(40)      # returns FALSE #> [1] FALSE  # same as within_n_mads(1)(test.vector)(40)    # returns FALSE #> [1] FALSE  within_n_mads(2)(test.vector)(as.numeric(NA))  # returns TRUE #> [1] TRUE # because, by default, within_bounds() will accept # NA values. If we want to reject NAs, we have to # provide extra arguments to this function within_n_mads(2, allow.na=FALSE)(test.vector)(as.numeric(NA))  # returns FALSE #> [1] FALSE  # or in a pipeline, like this was meant for  library(magrittr)  iris %>%   insist(within_n_mads(5), Sepal.Length) #>     Sepal.Length Sepal.Width Petal.Length Petal.Width    Species #> 1            5.1         3.5          1.4         0.2     setosa #> 2            4.9         3.0          1.4         0.2     setosa #> 3            4.7         3.2          1.3         0.2     setosa #> 4            4.6         3.1          1.5         0.2     setosa #> 5            5.0         3.6          1.4         0.2     setosa #> 6            5.4         3.9          1.7         0.4     setosa #> 7            4.6         3.4          1.4         0.3     setosa #> 8            5.0         3.4          1.5         0.2     setosa #> 9            4.4         2.9          1.4         0.2     setosa #> 10           4.9         3.1          1.5         0.1     setosa #> 11           5.4         3.7          1.5         0.2     setosa #> 12           4.8         3.4          1.6         0.2     setosa #> 13           4.8         3.0          1.4         0.1     setosa #> 14           4.3         3.0          1.1         0.1     setosa #> 15           5.8         4.0          1.2         0.2     setosa #> 16           5.7         4.4          1.5         0.4     setosa #> 17           5.4         3.9          1.3         0.4     setosa #> 18           5.1         3.5          1.4         0.3     setosa #> 19           5.7         3.8          1.7         0.3     setosa #> 20           5.1         3.8          1.5         0.3     setosa #> 21           5.4         3.4          1.7         0.2     setosa #> 22           5.1         3.7          1.5         0.4     setosa #> 23           4.6         3.6          1.0         0.2     setosa #> 24           5.1         3.3          1.7         0.5     setosa #> 25           4.8         3.4          1.9         0.2     setosa #> 26           5.0         3.0          1.6         0.2     setosa #> 27           5.0         3.4          1.6         0.4     setosa #> 28           5.2         3.5          1.5         0.2     setosa #> 29           5.2         3.4          1.4         0.2     setosa #> 30           4.7         3.2          1.6         0.2     setosa #> 31           4.8         3.1          1.6         0.2     setosa #> 32           5.4         3.4          1.5         0.4     setosa #> 33           5.2         4.1          1.5         0.1     setosa #> 34           5.5         4.2          1.4         0.2     setosa #> 35           4.9         3.1          1.5         0.2     setosa #> 36           5.0         3.2          1.2         0.2     setosa #> 37           5.5         3.5          1.3         0.2     setosa #> 38           4.9         3.6          1.4         0.1     setosa #> 39           4.4         3.0          1.3         0.2     setosa #> 40           5.1         3.4          1.5         0.2     setosa #> 41           5.0         3.5          1.3         0.3     setosa #> 42           4.5         2.3          1.3         0.3     setosa #> 43           4.4         3.2          1.3         0.2     setosa #> 44           5.0         3.5          1.6         0.6     setosa #> 45           5.1         3.8          1.9         0.4     setosa #> 46           4.8         3.0          1.4         0.3     setosa #> 47           5.1         3.8          1.6         0.2     setosa #> 48           4.6         3.2          1.4         0.2     setosa #> 49           5.3         3.7          1.5         0.2     setosa #> 50           5.0         3.3          1.4         0.2     setosa #> 51           7.0         3.2          4.7         1.4 versicolor #> 52           6.4         3.2          4.5         1.5 versicolor #> 53           6.9         3.1          4.9         1.5 versicolor #> 54           5.5         2.3          4.0         1.3 versicolor #> 55           6.5         2.8          4.6         1.5 versicolor #> 56           5.7         2.8          4.5         1.3 versicolor #> 57           6.3         3.3          4.7         1.6 versicolor #> 58           4.9         2.4          3.3         1.0 versicolor #> 59           6.6         2.9          4.6         1.3 versicolor #> 60           5.2         2.7          3.9         1.4 versicolor #> 61           5.0         2.0          3.5         1.0 versicolor #> 62           5.9         3.0          4.2         1.5 versicolor #> 63           6.0         2.2          4.0         1.0 versicolor #> 64           6.1         2.9          4.7         1.4 versicolor #> 65           5.6         2.9          3.6         1.3 versicolor #> 66           6.7         3.1          4.4         1.4 versicolor #> 67           5.6         3.0          4.5         1.5 versicolor #> 68           5.8         2.7          4.1         1.0 versicolor #> 69           6.2         2.2          4.5         1.5 versicolor #> 70           5.6         2.5          3.9         1.1 versicolor #> 71           5.9         3.2          4.8         1.8 versicolor #> 72           6.1         2.8          4.0         1.3 versicolor #> 73           6.3         2.5          4.9         1.5 versicolor #> 74           6.1         2.8          4.7         1.2 versicolor #> 75           6.4         2.9          4.3         1.3 versicolor #> 76           6.6         3.0          4.4         1.4 versicolor #> 77           6.8         2.8          4.8         1.4 versicolor #> 78           6.7         3.0          5.0         1.7 versicolor #> 79           6.0         2.9          4.5         1.5 versicolor #> 80           5.7         2.6          3.5         1.0 versicolor #> 81           5.5         2.4          3.8         1.1 versicolor #> 82           5.5         2.4          3.7         1.0 versicolor #> 83           5.8         2.7          3.9         1.2 versicolor #> 84           6.0         2.7          5.1         1.6 versicolor #> 85           5.4         3.0          4.5         1.5 versicolor #> 86           6.0         3.4          4.5         1.6 versicolor #> 87           6.7         3.1          4.7         1.5 versicolor #> 88           6.3         2.3          4.4         1.3 versicolor #> 89           5.6         3.0          4.1         1.3 versicolor #> 90           5.5         2.5          4.0         1.3 versicolor #> 91           5.5         2.6          4.4         1.2 versicolor #> 92           6.1         3.0          4.6         1.4 versicolor #> 93           5.8         2.6          4.0         1.2 versicolor #> 94           5.0         2.3          3.3         1.0 versicolor #> 95           5.6         2.7          4.2         1.3 versicolor #> 96           5.7         3.0          4.2         1.2 versicolor #> 97           5.7         2.9          4.2         1.3 versicolor #> 98           6.2         2.9          4.3         1.3 versicolor #> 99           5.1         2.5          3.0         1.1 versicolor #> 100          5.7         2.8          4.1         1.3 versicolor #> 101          6.3         3.3          6.0         2.5  virginica #> 102          5.8         2.7          5.1         1.9  virginica #> 103          7.1         3.0          5.9         2.1  virginica #> 104          6.3         2.9          5.6         1.8  virginica #> 105          6.5         3.0          5.8         2.2  virginica #> 106          7.6         3.0          6.6         2.1  virginica #> 107          4.9         2.5          4.5         1.7  virginica #> 108          7.3         2.9          6.3         1.8  virginica #> 109          6.7         2.5          5.8         1.8  virginica #> 110          7.2         3.6          6.1         2.5  virginica #> 111          6.5         3.2          5.1         2.0  virginica #> 112          6.4         2.7          5.3         1.9  virginica #> 113          6.8         3.0          5.5         2.1  virginica #> 114          5.7         2.5          5.0         2.0  virginica #> 115          5.8         2.8          5.1         2.4  virginica #> 116          6.4         3.2          5.3         2.3  virginica #> 117          6.5         3.0          5.5         1.8  virginica #> 118          7.7         3.8          6.7         2.2  virginica #> 119          7.7         2.6          6.9         2.3  virginica #> 120          6.0         2.2          5.0         1.5  virginica #> 121          6.9         3.2          5.7         2.3  virginica #> 122          5.6         2.8          4.9         2.0  virginica #> 123          7.7         2.8          6.7         2.0  virginica #> 124          6.3         2.7          4.9         1.8  virginica #> 125          6.7         3.3          5.7         2.1  virginica #> 126          7.2         3.2          6.0         1.8  virginica #> 127          6.2         2.8          4.8         1.8  virginica #> 128          6.1         3.0          4.9         1.8  virginica #> 129          6.4         2.8          5.6         2.1  virginica #> 130          7.2         3.0          5.8         1.6  virginica #> 131          7.4         2.8          6.1         1.9  virginica #> 132          7.9         3.8          6.4         2.0  virginica #> 133          6.4         2.8          5.6         2.2  virginica #> 134          6.3         2.8          5.1         1.5  virginica #> 135          6.1         2.6          5.6         1.4  virginica #> 136          7.7         3.0          6.1         2.3  virginica #> 137          6.3         3.4          5.6         2.4  virginica #> 138          6.4         3.1          5.5         1.8  virginica #> 139          6.0         3.0          4.8         1.8  virginica #> 140          6.9         3.1          5.4         2.1  virginica #> 141          6.7         3.1          5.6         2.4  virginica #> 142          6.9         3.1          5.1         2.3  virginica #> 143          5.8         2.7          5.1         1.9  virginica #> 144          6.8         3.2          5.9         2.3  virginica #> 145          6.7         3.3          5.7         2.5  virginica #> 146          6.7         3.0          5.2         2.3  virginica #> 147          6.3         2.5          5.0         1.9  virginica #> 148          6.5         3.0          5.2         2.0  virginica #> 149          6.2         3.4          5.4         2.3  virginica #> 150          5.9         3.0          5.1         1.8  virginica"},{"path":"https://docs.ropensci.org/assertr/reference/within_n_sds.html","id":null,"dir":"Reference","previous_headings":"","what":"Return a function to create z-score checking predicate — within_n_sds","title":"Return a function to create z-score checking predicate — within_n_sds","text":"function takes one argument, number standard deviations within accept particular data point.","code":""},{"path":"https://docs.ropensci.org/assertr/reference/within_n_sds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return a function to create z-score checking predicate — within_n_sds","text":"","code":"within_n_sds(n, ...)"},{"path":"https://docs.ropensci.org/assertr/reference/within_n_sds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return a function to create z-score checking predicate — within_n_sds","text":"n number standard deviations mean within accept datum ... Additional arguments passed within_bounds","code":""},{"path":"https://docs.ropensci.org/assertr/reference/within_n_sds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return a function to create z-score checking predicate — within_n_sds","text":"function takes vector returns  within_bounds predicate based standard deviation         vector.","code":""},{"path":"https://docs.ropensci.org/assertr/reference/within_n_sds.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Return a function to create z-score checking predicate — within_n_sds","text":"example, '2' passed function, return function takes vector figures bounds two standard deviations mean. function return within_bounds function can applied single datum. datum within two standard deviations mean vector given function returned function, return TRUE. , FALSE. function meant used , although can. Rather, function meant used insist function search potentially erroneous data points data set.","code":""},{"path":[]},{"path":"https://docs.ropensci.org/assertr/reference/within_n_sds.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return a function to create z-score checking predicate — within_n_sds","text":"","code":"test.vector <- rnorm(100, mean=100, sd=20)  within.one.sd <- within_n_sds(1) custom.bounds.checker <- within.one.sd(test.vector) custom.bounds.checker(105)     # returns TRUE #> [1] TRUE custom.bounds.checker(40)      # returns FALSE #> [1] FALSE  # same as within_n_sds(1)(test.vector)(40)    # returns FALSE #> [1] FALSE  within_n_sds(2)(test.vector)(as.numeric(NA))  # returns TRUE #> [1] TRUE # because, by default, within_bounds() will accept # NA values. If we want to reject NAs, we have to # provide extra arguments to this function within_n_sds(2, allow.na=FALSE)(test.vector)(as.numeric(NA))  # returns FALSE #> [1] FALSE  # or in a pipeline, like this was meant for  library(magrittr)  iris %>%   insist(within_n_sds(5), Sepal.Length) #>     Sepal.Length Sepal.Width Petal.Length Petal.Width    Species #> 1            5.1         3.5          1.4         0.2     setosa #> 2            4.9         3.0          1.4         0.2     setosa #> 3            4.7         3.2          1.3         0.2     setosa #> 4            4.6         3.1          1.5         0.2     setosa #> 5            5.0         3.6          1.4         0.2     setosa #> 6            5.4         3.9          1.7         0.4     setosa #> 7            4.6         3.4          1.4         0.3     setosa #> 8            5.0         3.4          1.5         0.2     setosa #> 9            4.4         2.9          1.4         0.2     setosa #> 10           4.9         3.1          1.5         0.1     setosa #> 11           5.4         3.7          1.5         0.2     setosa #> 12           4.8         3.4          1.6         0.2     setosa #> 13           4.8         3.0          1.4         0.1     setosa #> 14           4.3         3.0          1.1         0.1     setosa #> 15           5.8         4.0          1.2         0.2     setosa #> 16           5.7         4.4          1.5         0.4     setosa #> 17           5.4         3.9          1.3         0.4     setosa #> 18           5.1         3.5          1.4         0.3     setosa #> 19           5.7         3.8          1.7         0.3     setosa #> 20           5.1         3.8          1.5         0.3     setosa #> 21           5.4         3.4          1.7         0.2     setosa #> 22           5.1         3.7          1.5         0.4     setosa #> 23           4.6         3.6          1.0         0.2     setosa #> 24           5.1         3.3          1.7         0.5     setosa #> 25           4.8         3.4          1.9         0.2     setosa #> 26           5.0         3.0          1.6         0.2     setosa #> 27           5.0         3.4          1.6         0.4     setosa #> 28           5.2         3.5          1.5         0.2     setosa #> 29           5.2         3.4          1.4         0.2     setosa #> 30           4.7         3.2          1.6         0.2     setosa #> 31           4.8         3.1          1.6         0.2     setosa #> 32           5.4         3.4          1.5         0.4     setosa #> 33           5.2         4.1          1.5         0.1     setosa #> 34           5.5         4.2          1.4         0.2     setosa #> 35           4.9         3.1          1.5         0.2     setosa #> 36           5.0         3.2          1.2         0.2     setosa #> 37           5.5         3.5          1.3         0.2     setosa #> 38           4.9         3.6          1.4         0.1     setosa #> 39           4.4         3.0          1.3         0.2     setosa #> 40           5.1         3.4          1.5         0.2     setosa #> 41           5.0         3.5          1.3         0.3     setosa #> 42           4.5         2.3          1.3         0.3     setosa #> 43           4.4         3.2          1.3         0.2     setosa #> 44           5.0         3.5          1.6         0.6     setosa #> 45           5.1         3.8          1.9         0.4     setosa #> 46           4.8         3.0          1.4         0.3     setosa #> 47           5.1         3.8          1.6         0.2     setosa #> 48           4.6         3.2          1.4         0.2     setosa #> 49           5.3         3.7          1.5         0.2     setosa #> 50           5.0         3.3          1.4         0.2     setosa #> 51           7.0         3.2          4.7         1.4 versicolor #> 52           6.4         3.2          4.5         1.5 versicolor #> 53           6.9         3.1          4.9         1.5 versicolor #> 54           5.5         2.3          4.0         1.3 versicolor #> 55           6.5         2.8          4.6         1.5 versicolor #> 56           5.7         2.8          4.5         1.3 versicolor #> 57           6.3         3.3          4.7         1.6 versicolor #> 58           4.9         2.4          3.3         1.0 versicolor #> 59           6.6         2.9          4.6         1.3 versicolor #> 60           5.2         2.7          3.9         1.4 versicolor #> 61           5.0         2.0          3.5         1.0 versicolor #> 62           5.9         3.0          4.2         1.5 versicolor #> 63           6.0         2.2          4.0         1.0 versicolor #> 64           6.1         2.9          4.7         1.4 versicolor #> 65           5.6         2.9          3.6         1.3 versicolor #> 66           6.7         3.1          4.4         1.4 versicolor #> 67           5.6         3.0          4.5         1.5 versicolor #> 68           5.8         2.7          4.1         1.0 versicolor #> 69           6.2         2.2          4.5         1.5 versicolor #> 70           5.6         2.5          3.9         1.1 versicolor #> 71           5.9         3.2          4.8         1.8 versicolor #> 72           6.1         2.8          4.0         1.3 versicolor #> 73           6.3         2.5          4.9         1.5 versicolor #> 74           6.1         2.8          4.7         1.2 versicolor #> 75           6.4         2.9          4.3         1.3 versicolor #> 76           6.6         3.0          4.4         1.4 versicolor #> 77           6.8         2.8          4.8         1.4 versicolor #> 78           6.7         3.0          5.0         1.7 versicolor #> 79           6.0         2.9          4.5         1.5 versicolor #> 80           5.7         2.6          3.5         1.0 versicolor #> 81           5.5         2.4          3.8         1.1 versicolor #> 82           5.5         2.4          3.7         1.0 versicolor #> 83           5.8         2.7          3.9         1.2 versicolor #> 84           6.0         2.7          5.1         1.6 versicolor #> 85           5.4         3.0          4.5         1.5 versicolor #> 86           6.0         3.4          4.5         1.6 versicolor #> 87           6.7         3.1          4.7         1.5 versicolor #> 88           6.3         2.3          4.4         1.3 versicolor #> 89           5.6         3.0          4.1         1.3 versicolor #> 90           5.5         2.5          4.0         1.3 versicolor #> 91           5.5         2.6          4.4         1.2 versicolor #> 92           6.1         3.0          4.6         1.4 versicolor #> 93           5.8         2.6          4.0         1.2 versicolor #> 94           5.0         2.3          3.3         1.0 versicolor #> 95           5.6         2.7          4.2         1.3 versicolor #> 96           5.7         3.0          4.2         1.2 versicolor #> 97           5.7         2.9          4.2         1.3 versicolor #> 98           6.2         2.9          4.3         1.3 versicolor #> 99           5.1         2.5          3.0         1.1 versicolor #> 100          5.7         2.8          4.1         1.3 versicolor #> 101          6.3         3.3          6.0         2.5  virginica #> 102          5.8         2.7          5.1         1.9  virginica #> 103          7.1         3.0          5.9         2.1  virginica #> 104          6.3         2.9          5.6         1.8  virginica #> 105          6.5         3.0          5.8         2.2  virginica #> 106          7.6         3.0          6.6         2.1  virginica #> 107          4.9         2.5          4.5         1.7  virginica #> 108          7.3         2.9          6.3         1.8  virginica #> 109          6.7         2.5          5.8         1.8  virginica #> 110          7.2         3.6          6.1         2.5  virginica #> 111          6.5         3.2          5.1         2.0  virginica #> 112          6.4         2.7          5.3         1.9  virginica #> 113          6.8         3.0          5.5         2.1  virginica #> 114          5.7         2.5          5.0         2.0  virginica #> 115          5.8         2.8          5.1         2.4  virginica #> 116          6.4         3.2          5.3         2.3  virginica #> 117          6.5         3.0          5.5         1.8  virginica #> 118          7.7         3.8          6.7         2.2  virginica #> 119          7.7         2.6          6.9         2.3  virginica #> 120          6.0         2.2          5.0         1.5  virginica #> 121          6.9         3.2          5.7         2.3  virginica #> 122          5.6         2.8          4.9         2.0  virginica #> 123          7.7         2.8          6.7         2.0  virginica #> 124          6.3         2.7          4.9         1.8  virginica #> 125          6.7         3.3          5.7         2.1  virginica #> 126          7.2         3.2          6.0         1.8  virginica #> 127          6.2         2.8          4.8         1.8  virginica #> 128          6.1         3.0          4.9         1.8  virginica #> 129          6.4         2.8          5.6         2.1  virginica #> 130          7.2         3.0          5.8         1.6  virginica #> 131          7.4         2.8          6.1         1.9  virginica #> 132          7.9         3.8          6.4         2.0  virginica #> 133          6.4         2.8          5.6         2.2  virginica #> 134          6.3         2.8          5.1         1.5  virginica #> 135          6.1         2.6          5.6         1.4  virginica #> 136          7.7         3.0          6.1         2.3  virginica #> 137          6.3         3.4          5.6         2.4  virginica #> 138          6.4         3.1          5.5         1.8  virginica #> 139          6.0         3.0          4.8         1.8  virginica #> 140          6.9         3.1          5.4         2.1  virginica #> 141          6.7         3.1          5.6         2.4  virginica #> 142          6.9         3.1          5.1         2.3  virginica #> 143          5.8         2.7          5.1         1.9  virginica #> 144          6.8         3.2          5.9         2.3  virginica #> 145          6.7         3.3          5.7         2.5  virginica #> 146          6.7         3.0          5.2         2.3  virginica #> 147          6.3         2.5          5.0         1.9  virginica #> 148          6.5         3.0          5.2         2.0  virginica #> 149          6.2         3.4          5.4         2.3  virginica #> 150          5.9         3.0          5.1         1.8  virginica"}]
